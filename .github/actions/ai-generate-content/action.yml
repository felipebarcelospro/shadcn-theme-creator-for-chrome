name: 'AI Generate Content'
description: 'Leverages Google AI Studio with Gemini 1.5PRO to automatically generate high-quality content'

inputs:
  content-type:
    description: 'Type of content to generate (PR description, issue response, etc.)'
    required: true
  context-data:
    description: 'JSON string containing relevant context data'
    required: true
  template-path:
    description: 'Path to content template file'
    required: false
  additional-context:
    description: 'Additional context or instructions for the AI'
    required: false
  tone:
    description: 'Desired tone of the generated content (formal, casual, technical, etc.)'
    required: false
    default: 'neutral'
  max-length:
    description: 'Maximum length of the generated content in characters'
    required: false
    default: '2000'
  ai-api-key:
    description: 'API key for the Google AI service'
    required: true
  ai-model:
    description: 'AI model to use for content generation'
    required: true
    default: 'gemini-1.5-pro'

outputs:
  generated-content:
    description: 'The AI-generated content'
  generation-metadata:
    description: 'Metadata about the generation process (model used, confidence score, etc.)'

runs:
  using: "composite"
  steps:
  - name: Generate AI Content
    uses: google-github-actions/generative-ai-action@v0
    with:
      model: ${{ inputs.ai-model }}
      prompt: |
        Generate ${{ inputs.content-type }} content with the following context:
        ${{ inputs.context-data }}

        Additional instructions:
        ${{ inputs.additional-context }}

        Please use a ${{ inputs.tone }} tone and limit the response to ${{ inputs.max-length }} characters.

        If a template is provided, use it as a guide for the structure and format of the content.
      temperature: 0.2
      top_k: 20
      top_p: 0.8
      max_output_tokens: 1000
    env:
      GOOGLE_API_KEY: ${{ inputs.ai-api-key }}
    id: generate-content

  - name: Process response
    id: process-response
    run: |
      content="${{ steps.generate-content.outputs.response }}"
      metadata="${{ steps.generate-content.outputs.metadata }}"

      echo "generated-content<<EOF" >> $GITHUB_OUTPUT
      echo "$content" >> $GITHUB_OUTPUT
      echo "EOF" >> $GITHUB_OUTPUT

      echo "generation-metadata<<EOF" >> $GITHUB_OUTPUT
      echo "$metadata" >> $GITHUB_OUTPUT
      echo "EOF" >> $GITHUB_OUTPUT
    shell: bash

  - name: Debug - Generated content
    run: |
      echo "Generated content:"
      echo "${{ steps.process-response.outputs.generated-content }}"
      echo "Generation metadata:"
      echo "${{ steps.process-response.outputs.generation-metadata }}"
    shell: bash
