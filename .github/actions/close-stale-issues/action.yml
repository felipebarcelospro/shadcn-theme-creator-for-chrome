name: 'Close Stale Issues'
description: 'Automatically identifies and closes stale issues and PRs to keep the project board clean and focused on active work'

inputs:
  github-token:
    description: 'GitHub token for API access'
    required: true
  days-before-stale:
    description: 'Number of days of inactivity before an issue becomes stale'
    required: true
    default: '60'
  days-before-close:
    description: 'Number of days of inactivity before a stale issue is closed'
    required: true
    default: '7'
  stale-issue-label:
    description: 'Label to apply to stale issues'
    required: false
    default: 'stale'
  exempt-issue-labels:
    description: 'Comma-separated list of labels that exempt an issue from being marked stale'
    required: false
    default: 'pinned,security'
  stale-issue-message:
    description: 'Message to post on the issue when marking it as stale'
    required: false
    default: 'This issue has been automatically marked as stale due to inactivity.'
  close-issue-message:
    description: 'Message to post on the issue when closing it'
    required: false
    default: 'This issue has been automatically closed due to inactivity.'

outputs:
  closed-items:
    description: 'List of closed issues and PRs'
  closure-summary:
    description: 'Summary of the closure operation'

runs:
  using: 'composite'
  steps:
  - name: Debug inputs
    shell: bash -l {0}
    run: |
      echo "Debug: Input values"
      echo "days-before-stale: ${{ inputs.days-before-stale }}"
      echo "days-before-close: ${{ inputs.days-before-close }}"
      echo "stale-issue-label: ${{ inputs.stale-issue-label }}"
      echo "exempt-issue-labels: ${{ inputs.exempt-issue-labels }}"
      echo "stale-issue-message: ${{ inputs.stale-issue-message }}"
      echo "close-issue-message: ${{ inputs.close-issue-message }}"

  - name: Fetch open issues and PRs
    id: fetch-items
    uses: actions/github-script@v6
    with:
      github-token: ${{ inputs.github-token }}
      script: |
        const { owner, repo } = context.repo;
        const { data: issues } = await github.rest.issues.listForRepo({
          owner,
          repo,
          state: 'open'
        });
        return issues;

  - name: Analyze and close stale items
    id: close-stale
    uses: actions/github-script@v6
    with:
      github-token: ${{ inputs.github-token }}
      script: |
        const daysBeforeStale = parseInt('${{ inputs.days-before-stale }}');
        const daysBeforeClose = parseInt('${{ inputs.days-before-close }}');
        const staleLabel = '${{ inputs.stale-issue-label }}';
        const exemptLabels = '${{ inputs.exempt-issue-labels }}'.split(',');
        const staleMessage = '${{ inputs.stale-issue-message }}';
        const closeMessage = '${{ inputs.close-issue-message }}';
        const items = ${{ steps.fetch-items.outputs.result }};
        const closedItems = [];

        for (const item of items) {
          const lastUpdateTime = new Date(item.updated_at).getTime();
          const currentTime = new Date().getTime();
          const daysSinceLastUpdate = (currentTime - lastUpdateTime) / (1000 * 60 * 60 * 24);

          if (daysSinceLastUpdate > daysBeforeStale + daysBeforeClose) {
            if (!exemptLabels.some(label => item.labels.some(itemLabel => itemLabel.name === label))) {
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: item.number,
                state: 'closed',
                state_reason: 'not_planned'
              });

              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: item.number,
                body: closeMessage
              });

              closedItems.push({
                number: item.number,
                title: item.title,
                type: item.pull_request ? 'PR' : 'Issue'
              });
            }
          } else if (daysSinceLastUpdate > daysBeforeStale) {
            if (!item.labels.some(label => label.name === staleLabel)) {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: item.number,
                labels: [staleLabel]
              });

              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: item.number,
                body: staleMessage
              });
            }
          }
        }

        return closedItems;

  - name: Generate closure report
    id: generate-report
    uses: actions/github-script@v6
    with:
      github-token: ${{ inputs.github-token }}
      script: |
        const closedItems = ${{ steps.close-stale.outputs.result }};
        const summary = `Closed ${closedItems.length} stale items:\n${closedItems.map(item => `- ${item.type} #${item.number}: ${item.title}`).join('\n')}`;
        return { closedItems, summary };

  - name: Set outputs
    id: set-outputs
    run: |
      echo 'closed-items=${{ toJson(fromJson(steps.generate-report.outputs.result).closedItems) }}' >> $GITHUB_OUTPUT
      echo 'closure-summary=${{ fromJson(steps.generate-report.outputs.result).summary }}' >> $GITHUB_OUTPUT
    shell: bash -l {0}

  - name: Error handling
    if: failure()
    run: |
      echo "An error occurred during the stale issue closure process"
      echo "closed-items=[]" >> $GITHUB_OUTPUT
      echo "closure-summary=Stale issue closure failed due to an error" >> $GITHUB_OUTPUT
    shell: bash -l {0}
