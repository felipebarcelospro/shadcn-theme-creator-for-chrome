name: Build and Test

on:
  push:
    branches: ["main", "develop", "feature/*", "release/*", "hotfix/*", "ci/*", "chore/*"]
  pull_request:
    branches: ["main", "develop"]
  workflow_dispatch:

jobs:
  check_project_changes:
    runs-on: ubuntu-latest
    outputs:
      changes: ${{ steps.check.outputs.changes }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for Changes
        id: check
        run: |
          echo "changes=[\"all\"]" >> $GITHUB_OUTPUT
          echo "Detected changes in all projects"

  build_packages:
    runs-on: ubuntu-latest
    needs: check_project_changes
    if: contains(fromJson(needs.check_project_changes.outputs.changes), 'all') || contains(fromJson(needs.check_project_changes.outputs.changes), 'packages')
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'

      - name: Install Dependencies
        run: yarn install

      - name: Build Packages
        run: yarn turbo run build --filter=./packages/*


  build_web:
    runs-on: ubuntu-latest
    needs: [check_project_changes, build_packages]
    if: contains(fromJson(needs.check_project_changes.outputs.changes), 'all') || contains(fromJson(needs.check_project_changes.outputs.changes), 'web')
    env:
      NEXT_PUBLIC_PLUNK_API_KEY: ${{ secrets.NEXT_PUBLIC_PLUNK_API_KEY }}
      NEXT_PUBLIC_GOOGLE_ANALYTICS_ID: ${{ vars.NEXT_PUBLIC_GOOGLE_ANALYTICS_ID }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'

      - name: Install Dependencies
        run: yarn install

      - name: Build Web App
        run: yarn turbo run build --filter=web...

      - name: Upload Web Artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./apps/web/out

  build_extension:
    runs-on: ubuntu-latest
    needs: [check_project_changes, build_packages]
    if: contains(fromJson(needs.check_project_changes.outputs.changes), 'all') || contains(fromJson(needs.check_project_changes.outputs.changes), 'chrome-extension')
    env:
      NEXT_PUBLIC_PLUNK_API_KEY: ${{ secrets.NEXT_PUBLIC_PLUNK_API_KEY }}
      NEXT_PUBLIC_GOOGLE_ANALYTICS_ID: ${{ vars.NEXT_PUBLIC_GOOGLE_ANALYTICS_ID }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'

      - name: Install Dependencies
        run: yarn install

      - name: Build Chrome Extension
        run: yarn turbo run build --filter=chrome-extension...

      - name: Determine Version Bump
        id: determine_version
        run: |
          branch=${GITHUB_REF#refs/heads/}
          if [[ "$branch" == release/* ]]; then
            bump="minor"
          elif [[ "$branch" == hotfix/* ]]; then
            bump="patch"
          else
            bump="patch"
          fi
          current_version=$(jq -r '.version' apps/chrome-extension/package.json)
          new_version=$(echo $current_version | awk -F. -v bump="$bump" '{if(bump=="patch") $3++; else if(bump=="minor") {$2++; $3=0} else {$1++; $2=0; $3=0}} 1' OFS=.)
          echo "version=$new_version" >> $GITHUB_OUTPUT
          echo "New version: $new_version"

      - name: Update Version in Files
        run: |
          jq --arg version "${{ steps.determine_version.outputs.version }}" '.version = $version' apps/chrome-extension/package.json > tmp.json && mv tmp.json apps/chrome-extension/package.json
          jq --arg version "${{ steps.determine_version.outputs.version }}" '.version = $version' package.json > tmp.json && mv tmp.json package.json

      - name: Commit Version Update
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add apps/chrome-extension/package.json package.json
          git commit -m "chore: bump version to ${{ steps.determine_version.outputs.version }}"
          git push

      - name: Zip Chrome Extension
        run: |
          mkdir -p releases
          cd apps/chrome-extension/dist
          zip -r ../../../releases/STC_Beta_${{ steps.determine_version.outputs.version }}.zip .

      - name: Upload Chrome Extension Zip
        uses: actions/upload-artifact@v4
        with:
          name: chrome-extension
          path: releases/STC_Beta_${{ steps.determine_version.outputs.version }}.zip