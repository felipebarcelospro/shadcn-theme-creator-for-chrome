name: 'Link Related Items'
description: 'Automatically links related issues and PRs to improve traceability and context'

inputs:
  item-type:
    description: 'Type of item to analyze for links (issue/pr)'
    required: true
  item-number:
    description: 'Number of the issue or PR'
    required: true

outputs:
  linked-items:
    description: 'List of items linked to the analyzed item'
  linking-summary:
    description: 'Summary of the linking operation'

runs:
  using: 'composite'
  steps:
  - name: Debug inputs
    shell: bash -l {0}
    run: |
      echo "Debug: Input values"
      echo "item-type: ${{ inputs.item-type }}"
      echo "item-number: ${{ inputs.item-number }}"

  - name: Fetch and analyze item content
    id: fetch-content
    uses: actions/github-script@v6
    with:
      github-token: ${{ secrets.GITHUB_TOKEN }}
      script: |
        const { owner, repo } = context.repo;
        const itemType = '${{ inputs.item-type }}';
        const itemNumber = '${{ inputs.item-number }}';
        let content, mentions;

        if (itemType === 'issue') {
          const { data: issue } = await github.rest.issues.get({
            owner,
            repo,
            issue_number: itemNumber
          });
          content = issue.title + '\n' + issue.body;
        } else if (itemType === 'pr') {
          const { data: pr } = await github.rest.pulls.get({
            owner,
            repo,
            pull_number: itemNumber
          });
          content = pr.title + '\n' + pr.body;
        }

        mentions = content.match(/#\d+/g) || [];
        return { content, mentions };

  - name: Validate and create links
    id: create-links
    uses: actions/github-script@v6
    with:
      github-token: ${{ secrets.GITHUB_TOKEN }}
      script: |
        const { owner, repo } = context.repo;
        const itemType = '${{ inputs.item-type }}';
        const itemNumber = '${{ inputs.item-number }}';
        const { mentions } = ${{ steps.fetch-content.outputs.result }};
        const linkedItems = [];

        for (const mention of mentions) {
          const mentionNumber = parseInt(mention.substring(1));
          try {
            await github.rest.issues.get({
              owner,
              repo,
              issue_number: mentionNumber
            });
            linkedItems.push(mentionNumber);
          } catch (error) {
            console.log(`Mentioned item #${mentionNumber} does not exist or is not accessible.`);
          }
        }

        return linkedItems;

  - name: Update item description
    id: update-description
    uses: actions/github-script@v6
    with:
      github-token: ${{ secrets.GITHUB_TOKEN }}
      script: |
        const { owner, repo } = context.repo;
        const itemType = '${{ inputs.item-type }}';
        const itemNumber = '${{ inputs.item-number }}';
        const linkedItems = ${{ steps.create-links.outputs.result }};

        const linkingSection = `
        ## Related Items
        ${linkedItems.map(item => `- #${item}`).join('\n')}
        `;

        if (itemType === 'issue') {
          await github.rest.issues.update({
            owner,
            repo,
            issue_number: itemNumber,
            body: linkingSection
          });
        } else if (itemType === 'pr') {
          await github.rest.pulls.update({
            owner,
            repo,
            pull_number: itemNumber,
            body: linkingSection
          });
        }

  - name: Set outputs
    id: set-outputs
    run: |
      echo "linked-items=${{ steps.create-links.outputs.result }}" >> $GITHUB_OUTPUT
      echo "linking-summary=Linked items: ${{ steps.create-links.outputs.result }}" >> $GITHUB_OUTPUT
    shell: bash -l {0}

  - name: Error handling
    if: failure()
    run: |
      echo "An error occurred during the linking process"
      echo "linked-items=[]" >> $GITHUB_OUTPUT
      echo "linking-summary=Linking failed due to an error" >> $GITHUB_OUTPUT
    shell: bash -l {0}
