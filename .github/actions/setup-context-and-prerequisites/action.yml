name: 'Setup Context and Prerequisites'
description: 'Set up necessary context and prerequisites for the workflow'

inputs:
  github-token:
    description: 'GitHub token for API access'
    required: true

outputs:
  repository-context:
    description: 'JSON object containing repository context'
  config-data:
    description: 'Parsed configuration data'
  environment-variables:
    description: 'Set environment variables'
  package-manager:
    description: 'Detected package manager'
  installation-status:
    description: 'Status of the installation process'

runs:
  using: "composite"
  steps:
  - name: Install dependencies
    shell: bash
    run: |
      npm install fs js-yaml

  - name: Setup Context and Prerequisites
    uses: actions/github-script@v6
    with:
      github-token: ${{ inputs.github-token }}
      script: |
        const fs = require('fs');
        const yaml = require('js-yaml');

        // Load and parse config.yml
        const configPath = '.github/config.yml';
        if (!fs.existsSync(configPath)) {
          core.setFailed('config.yml is missing');
          return;
        }
        const configData = yaml.load(fs.readFileSync(configPath, 'utf8'));
        core.setOutput('config-data', JSON.stringify(configData));

        // Detect package manager
        let packageManager = configData.packages?.global_settings?.ci_cd?.package_manager;
        if (!packageManager) {
          if (fs.existsSync('package-lock.json')) packageManager = 'npm';
          else if (fs.existsSync('yarn.lock')) packageManager = 'yarn';
          else if (fs.existsSync('pnpm-lock.yaml')) packageManager = 'pnpm';
          else {
            core.setFailed('No supported package manager lock file found in the repository root');
            return;
          }
        }
        core.setOutput('package-manager', packageManager);

        // Install dependencies
        const { execSync } = require('child_process');
        try {
          switch (packageManager) {
            case 'npm':
              execSync('npm ci');
              break;
            case 'yarn':
              execSync('yarn install --frozen-lockfile');
              break;
            case 'pnpm':
              execSync('pnpm install --frozen-lockfile');
              break;
            default:
              core.setFailed(`Unsupported package manager: ${packageManager}`);
              return;
          }
          core.setOutput('installation-status', 'success');
        } catch (error) {
          core.setFailed(`Failed to install dependencies: ${error.message}`);
          return;
        }

        // Fetch repository metadata
        const repoMetadata = await github.rest.repos.get({
          owner: context.repo.owner,
          repo: context.repo.repo
        });

        // Set up environment variables
        const envVars = {
          REPO_NAME: `${context.repo.owner}/${context.repo.repo}`,
          REPO_OWNER: context.repo.owner,
          GITHUB_SHA: context.sha,
          GITHUB_REF: context.ref,
          PACKAGE_MANAGER: packageManager,
          REPO_TYPE: configData.repository.type,
          MAIN_BRANCHES: JSON.stringify(configData.repository.version_control.main_branches),
          BRANCH_PREFIXES: JSON.stringify(configData.repository.version_control.branch_prefixes),
          MERGE_STRATEGY: JSON.stringify(configData.repository.version_control.merge_strategy),
          PROTECTED_BRANCHES: JSON.stringify(configData.repository.version_control.protected_branches)
        };
        Object.entries(envVars).forEach(([key, value]) => {
          core.exportVariable(key, value);
        });
        core.setOutput('environment-variables', 'Environment variables set');

        // Validate repository settings
        if (!repoMetadata.data.has_issues && configData.issue_management.auto_label.enabled) {
          core.warning('Issues are not enabled for this repository, but issue management is configured');
        }
        if (!repoMetadata.data.has_projects && configData.repository.type === 'monorepo') {
          core.warning('Projects are not enabled for this repository, but it is configured as a monorepo');
        }

        // Set repository context
        const repositoryContext = {
          repoMetadata: repoMetadata.data,
          config: configData,
          branch: context.ref.replace('refs/heads/', ''),
          commit: context.sha,
          repoType: configData.repository.type,
          mainBranches: configData.repository.version_control.main_branches,
          branchPrefixes: configData.repository.version_control.branch_prefixes,
          mergeStrategy: configData.repository.version_control.merge_strategy,
          protectedBranches: configData.repository.version_control.protected_branches,
          packageManager: packageManager
        };
        core.setOutput('repository-context', JSON.stringify(repositoryContext));

        // Output results
        console.log('Repository context:', JSON.stringify(repositoryContext));
        console.log('Configuration data:', JSON.stringify(configData));
        console.log('Environment variables set:', core.getOutput('environment-variables'));
        console.log('Package manager:', packageManager);
        console.log('Installation status:', core.getOutput('installation-status'));
        console.log('Setup context and prerequisites completed successfully');
