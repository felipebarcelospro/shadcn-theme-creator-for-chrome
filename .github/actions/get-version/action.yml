name: 'Get Version'
description: 'Determines the next version number based on the release type'

inputs:
  release_type:
    description: 'Type of release (major/minor/patch)'
    required: true
    default: 'patch'
  current_version:
    description: 'Current version number (optional)'
    required: false
  github-token:
    description: 'GitHub token for API access'
    required: true

outputs:
  new_version:
    description: 'The new version number'
  previous_version:
    description: 'The previous version number'

runs:
  using: 'composite'
  steps:
  - name: Checkout repository
    uses: actions/checkout@v3

  - name: Setup Node.js
    uses: actions/setup-node@v3
    with:
      node-version: '20'

  - name: Install dependencies
    shell: bash
    run: npm install @actions/github @actions/core

  - name: Get previous version and calculate new version
    id: version-calc
    shell: node
    env:
      GITHUB_TOKEN: ${{ inputs.github-token }}
      RELEASE_TYPE: ${{ inputs.release_type }}
      CURRENT_VERSION: ${{ inputs.current_version }}
    run: |
      const github = require('@actions/github');
      const core = require('@actions/core');

      async function getVersions() {
        const octokit = github.getOctokit(process.env.GITHUB_TOKEN);
        const { owner, repo } = github.context.repo;

        try {
          let previousVersion = process.env.CURRENT_VERSION;
          if (!previousVersion) {
            const { data: latestRelease } = await octokit.rest.repos.getLatestRelease({
              owner,
              repo,
            });
            previousVersion = latestRelease.tag_name.replace('v', '');
          }

          const [major, minor, patch] = previousVersion.split('.').map(Number);
          let newVersion;

          switch (process.env.RELEASE_TYPE) {
            case 'major':
              newVersion = `${major + 1}.0.0`;
              break;
            case 'minor':
              newVersion = `${major}.${minor + 1}.0`;
              break;
            case 'patch':
              newVersion = `${major}.${minor}.${patch + 1}`;
              break;
            default:
              throw new Error(`Invalid release type: ${process.env.RELEASE_TYPE}`);
          }

          core.setOutput('previous_version', previousVersion);
          core.setOutput('new_version', newVersion);

          console.log(`Previous version: ${previousVersion}`);
          console.log(`New version: ${newVersion}`);
          console.log(`Release type: ${process.env.RELEASE_TYPE}`);
        } catch (error) {
          core.setFailed(`Error calculating version: ${error.message}`);
        }
      }

      getVersions();

  - name: Debug output
    shell: bash
    run: |
      echo "Previous version: ${{ steps.version-calc.outputs.previous_version }}"
      echo "New version: ${{ steps.version-calc.outputs.new_version }}"
      echo "Release type: ${{ inputs.release_type }}"
