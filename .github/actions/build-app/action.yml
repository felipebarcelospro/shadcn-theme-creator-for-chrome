name: 'Build App'
description: 'Builds the application for production'

inputs:
  working-directory:
    description: 'Directory to run build in (for monorepos)'
    required: false
    default: '.'
  build-command:
    description: 'Custom build command (overrides default)'
    required: false
  environment:
    description: 'Build environment (e.g., production, staging)'
    required: false
    default: 'production'
  github-token:
    description: 'GitHub token for API access'
    required: true

outputs:
  build-status:
    description: 'Overall build status (success/failure)'
  build-artifacts:
    description: 'Path to build artifacts'
  build-logs:
    description: 'Path to build logs'
  performance-metrics:
    description: 'Build performance metrics (JSON object)'

runs:
  using: 'composite'
  steps:
  - name: Setup Node.js
    uses: actions/setup-node@v3
    with:
      node-version: '20'

  - name: Detect package manager and install dependencies
    shell: bash
    run: |
      if [ -f "${{ inputs.working-directory }}/yarn.lock" ]; then
        yarn --cwd ${{ inputs.working-directory }} install --frozen-lockfile
      elif [ -f "${{ inputs.working-directory }}/package-lock.json" ]; then
        npm ci --prefix ${{ inputs.working-directory }}
      else
        npm install --prefix ${{ inputs.working-directory }}
      fi

  - name: Load build configuration
    shell: bash
    run: |
      echo "Loading build configuration for ${{ inputs.environment }} environment"

  - name: Execute build command
    shell: bash
    run: |
      if [ -n "${{ inputs.build-command }}" ]; then
        ${{ inputs.build-command }}
      else
        npm run build --prefix ${{ inputs.working-directory }}
      fi

  - name: Collect and compress build artifacts
    shell: bash
    run: |
      mkdir -p artifacts
      tar -czf artifacts/build.tar.gz -C ${{ inputs.working-directory }}/build .
      echo "build-artifacts=$(pwd)/artifacts/build.tar.gz" >> $GITHUB_OUTPUT

  - name: Generate build report and performance metrics
    shell: bash
    run: |
      echo '{"buildTime": "'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'"}' > metrics.json
      echo "performance-metrics=$(cat metrics.json)" >> $GITHUB_OUTPUT

  - name: Cache build artifacts
    uses: actions/cache@v3
    with:
      path: artifacts
      key: ${{ runner.os }}-build-${{ github.sha }}

  - name: Set outputs
    shell: bash
    run: |
      echo "build-status=success" >> $GITHUB_OUTPUT
      echo "build-logs=$(pwd)/build.log" >> $GITHUB_OUTPUT

  - name: Error handling
    if: failure()
    shell: bash
    run: |
      echo "build-status=failure" >> $GITHUB_OUTPUT
      echo "Build failed. Check logs for details."
