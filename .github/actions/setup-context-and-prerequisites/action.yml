name: 'Setup Context and Prerequisites'
description: 'Set up necessary context and prerequisites for the workflow'

inputs:
  github-token:
    description: 'GitHub token for API access'
    required: true
  debug:
    description: 'Enable debug mode'
    required: false
    default: 'false'

outputs:
  repository-context:
    description: 'JSON object containing repository context'
  config-data:
    description: 'Parsed configuration data'
  environment-variables:
    description: 'Set environment variables'
  package-manager:
    description: 'Detected package manager'
  installation-status:
    description: 'Status of the installation process'
  changed_files:
    description: 'List of changed files in the current commit or PR'
  apps_configuration:
    description: 'Configuration for all apps in the repository'
  github_pages_urls:
    description: 'URLs of GitHub Pages for the repository'

runs:
  using: "composite"
  steps:
  - name: Install jq and yq
    shell: bash
    run: |
      sudo apt-get update
      sudo apt-get install -y jq
      sudo wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/bin/yq
      sudo chmod +x /usr/bin/yq

  - name: Load and parse config.yml
    shell: bash
    run: |
      if [ ! -f ".github/config.yml" ]; then
        echo "Error: config.yml is missing"
        exit 1
      fi
      CONFIG_DATA=$(yq eval -o=json .github/config.yml)
      echo "config-data<<EOF" >> $GITHUB_OUTPUT
      echo "$CONFIG_DATA" >> $GITHUB_OUTPUT
      echo "EOF" >> $GITHUB_OUTPUT

      # Validate essential config sections
      if ! echo "$CONFIG_DATA" | jq -e '.repository' > /dev/null; then
        echo "Error: 'repository' section is missing in config.yml"
        exit 1
      fi

  - name: Detect package manager
    shell: bash
    run: |
      PACKAGE_MANAGER=$(echo "$CONFIG_DATA" | jq -r '.packages.global_settings.ci_cd.package_manager // "unknown"')
      echo "package-manager=$PACKAGE_MANAGER" >> $GITHUB_OUTPUT

  - name: Fetch repository metadata
    shell: bash
    env:
      GITHUB_TOKEN: ${{ inputs.github-token }}
    run: |
      REPO_METADATA=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
        "https://api.github.com/repos/$GITHUB_REPOSITORY")
      if [ -z "$REPO_METADATA" ]; then
        echo "Error: Failed to fetch repository metadata"
        exit 1
      fi
      echo "repo-metadata<<EOF" >> $GITHUB_OUTPUT
      echo "$REPO_METADATA" >> $GITHUB_OUTPUT
      echo "EOF" >> $GITHUB_OUTPUT

  - name: Get changed files
    shell: bash
    env:
      GITHUB_TOKEN: ${{ inputs.github-token }}
    run: |
      if [[ $GITHUB_REF == refs/pull/* ]]; then
        PR_NUMBER=${GITHUB_REF#refs/pull/}
        PR_NUMBER=${PR_NUMBER%/merge}
        CHANGED_FILES=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
          "https://api.github.com/repos/$GITHUB_REPOSITORY/pulls/$PR_NUMBER/files" \
          | jq -r '.[].filename')
      else
        CHANGED_FILES=$(git diff-tree --no-commit-id --name-only -r $GITHUB_SHA)
      fi
      if [ -z "$CHANGED_FILES" ]; then
        echo "Warning: No changed files detected"
      fi
      echo "changed_files<<EOF" >> $GITHUB_OUTPUT
      echo "$CHANGED_FILES" >> $GITHUB_OUTPUT
      echo "EOF" >> $GITHUB_OUTPUT

  - name: Set environment variables
    shell: bash
    run: |
      CONFIG_DATA=$(cat $GITHUB_OUTPUT | sed -n '/^config-data<<EOF$/,/^EOF$/p' | sed '1d;$d')
      {
        echo "REPO_NAME=${GITHUB_REPOSITORY}"
        echo "REPO_OWNER=${GITHUB_REPOSITORY_OWNER}"
        echo "GITHUB_SHA=${GITHUB_SHA}"
        echo "GITHUB_REF=${GITHUB_REF}"
        echo "REPO_TYPE=$(echo "$CONFIG_DATA" | jq -r '.repository.type // "monorepo"')"
        echo "MAIN_BRANCHES=$(echo "$CONFIG_DATA" | jq -r '.repository.version_control.main_branches // ["main", "develop"] | join(",")')"
        echo "BRANCH_PREFIXES=$(echo "$CONFIG_DATA" | jq -r '.repository.version_control.branch_prefixes // {} | to_entries | map("\(.key)=\(.value)") | join(",")')"
        echo "MERGE_STRATEGY=$(echo "$CONFIG_DATA" | jq -r '.repository.version_control.merge_strategy // empty')"
        echo "PROTECTED_BRANCHES=$(echo "$CONFIG_DATA" | jq -r '.repository.version_control.protected_branches // ["main", "develop"] | join(",")')"
      } >> $GITHUB_ENV
      echo "environment-variables=Environment variables set" >> $GITHUB_OUTPUT

  - name: Set repository context
    shell: bash
    run: |
      REPO_METADATA=$(cat $GITHUB_OUTPUT | sed -n '/^repo-metadata<<EOF$/,/^EOF$/p' | sed '1d;$d')
      CONFIG_DATA=$(cat $GITHUB_OUTPUT | sed -n '/^config-data<<EOF$/,/^EOF$/p' | sed '1d;$d')
      CHANGED_FILES=$(cat $GITHUB_OUTPUT | sed -n '/^changed_files<<EOF$/,/^EOF$/p' | sed '1d;$d')
      PACKAGE_MANAGER=$(cat $GITHUB_OUTPUT | grep '^package-manager=' | cut -d'=' -f2)

      REPOSITORY_CONTEXT=$(jq -n \
        --argjson repoMetadata "$REPO_METADATA" \
        --argjson config "$CONFIG_DATA" \
        --arg branch "${GITHUB_REF#refs/heads/}" \
        --arg commit "$GITHUB_SHA" \
        --arg packageManager "$PACKAGE_MANAGER" \
        --argjson changedFiles "$(echo "$CHANGED_FILES" | jq -R -s 'split("\n")[:-1]')" \
        '{
          repoMetadata: $repoMetadata,
          config: $config,
          branch: $branch,
          commit: $commit,
          repoType: ($config.repository.type // "monorepo"),
          mainBranches: ($config.repository.version_control.main_branches // ["main", "develop"]),
          branchPrefixes: ($config.repository.version_control.branch_prefixes // {}),
          mergeStrategy: ($config.repository.version_control.merge_strategy // null),
          protectedBranches: ($config.repository.version_control.protected_branches // ["main", "develop"]),
          packageManager: $packageManager,
          changedFiles: $changedFiles
        }')
      echo "repository-context<<EOF" >> $GITHUB_OUTPUT
      echo "$REPOSITORY_CONTEXT" >> $GITHUB_OUTPUT
      echo "EOF" >> $GITHUB_OUTPUT

  - name: Set apps configuration
    shell: bash
    run: |
      CONFIG_DATA=$(cat $GITHUB_OUTPUT | sed -n '/^config-data<<EOF$/,/^EOF$/p' | sed '1d;$d')
      APPS_CONFIG=$(echo "$CONFIG_DATA" | jq -r '.packages.package_specific // {}')
      echo "apps_configuration<<EOF" >> $GITHUB_OUTPUT
      echo "$APPS_CONFIG" >> $GITHUB_OUTPUT
      echo "EOF" >> $GITHUB_OUTPUT

  - name: Set GitHub Pages URLs
    shell: bash
    run: |
      CONFIG_DATA=$(cat $GITHUB_OUTPUT | sed -n '/^config-data<<EOF$/,/^EOF$/p' | sed '1d;$d')
      PAGES_URL=$(echo "$CONFIG_DATA" | jq -r '.packages.package_specific.web.ci_cd.deployment.production.url // empty')
      if [ -z "$PAGES_URL" ]; then
        PAGES_URL="https://${GITHUB_REPOSITORY_OWNER}.github.io/${GITHUB_REPOSITORY#*/}"
      fi
      echo "github_pages_urls=[\"$PAGES_URL\"]" >> $GITHUB_OUTPUT

  - name: Completion message
    shell: bash
    run: |
      echo "Setup context and prerequisites completed successfully"
      if [ "${{ inputs.debug }}" = "true" ]; then
        echo "Debug: Repository Context"
        cat $GITHUB_OUTPUT | sed -n '/^repository-context<<EOF$/,/^EOF$/p' | sed '1d;$d' | jq '.'
      fi
