name: 'Create Dependency Update PRs'
description: 'Creates pull requests for dependency updates'

inputs:
  github-token:
    description: 'GitHub token for API access'
    required: true
  update-report:
    description: 'Report of available updates from check-dependency-updates'
    required: true
  vulnerability-report:
    description: 'Report of vulnerabilities from security-vulnerability-scan'
    required: true

outputs:
  created-prs:
    description: 'List of created pull requests'
  pr-creation-summary:
    description: 'Summary of the pull request creation operation'

runs:
  using: 'composite'
  steps:
  - name: Checkout repository
    uses: actions/checkout@v3

  - name: Setup Node.js
    uses: actions/setup-node@v3
    with:
      node-version: '20'

  - name: Install dependencies
    shell: bash
    run: npm install @actions/github @actions/core

  - name: Create update branches and PRs
    id: create-prs
    shell: node
    env:
      GITHUB_TOKEN: ${{ inputs.github-token }}
      UPDATE_REPORT: ${{ inputs.update-report }}
      VULNERABILITY_REPORT: ${{ inputs.vulnerability-report }}
    run: |
      const github = require('@actions/github');
      const core = require('@actions/core');

      async function createUpdatePRs() {
        const octokit = github.getOctokit(process.env.GITHUB_TOKEN);
        const { owner, repo } = github.context.repo;

        try {
          const updateReport = JSON.parse(process.env.UPDATE_REPORT);
          const vulnerabilityReport = JSON.parse(process.env.VULNERABILITY_REPORT);

          const createdPRs = [];

          for (const updateType of ['major', 'minor', 'patch']) {
            const updates = updateReport[updateType] || [];
            for (const update of updates) {
              const [packageName, version] = update.split(':');
              const branchName = `dependency-update/${packageName}-${version.trim()}`;

              // Create a new branch
              await octokit.rest.git.createRef({
                owner,
                repo,
                ref: `refs/heads/${branchName}`,
                sha: github.context.sha
              });

              // Update package.json (simplified example)
              const { data: packageJson } = await octokit.rest.repos.getContent({
                owner,
                repo,
                path: 'package.json'
              });

              const content = Buffer.from(packageJson.content, 'base64').toString('utf-8');
              const updatedContent = content.replace(
                new RegExp(`"${packageName}": ".*"`),
                `"${packageName}": "${version.trim()}"`
              );

              await octokit.rest.repos.createOrUpdateFileContents({
                owner,
                repo,
                path: 'package.json',
                message: `Update ${packageName} to version ${version.trim()}`,
                content: Buffer.from(updatedContent).toString('base64'),
                branch: branchName,
                sha: packageJson.sha
              });

              // Create PR
              const { data: pr } = await octokit.rest.pulls.create({
                owner,
                repo,
                title: `Update ${packageName} to version ${version.trim()}`,
                head: branchName,
                base: 'main',
                body: `This PR updates ${packageName} to version ${version.trim()}.`
              });

              createdPRs.push(pr.html_url);
            }
          }

          core.setOutput('created-prs', JSON.stringify(createdPRs));
          core.setOutput('pr-creation-summary', `Created ${createdPRs.length} pull requests for dependency updates.`);
        } catch (error) {
          core.setFailed(`Error creating update PRs: ${error.message}`);
        }
      }

      createUpdatePRs();
