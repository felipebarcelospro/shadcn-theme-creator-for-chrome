name: 'Set Milestone'
description: 'Automatically assigns issues and PRs to appropriate milestones'

inputs:
  github-token:
    description: 'GitHub token for API access'
    required: true
  item-type:
    description: 'Type of item to assign milestone (issue/pr)'
    required: true
  item-number:
    description: 'Number of the issue or PR'
    required: true
  milestone-title:
    description: 'Title of the milestone to assign'
    required: true
  label-to-match:
    description: 'Label to match for milestone assignment'
    required: true

outputs:
  assigned-milestone:
    description: 'Name or number of the assigned milestone'
  assignment-status:
    description: 'Status of the milestone assignment operation'

runs:
  using: "composite"
  steps:
  - name: Checkout repository
    uses: actions/checkout@v3

  - name: Debug inputs
    shell: bash -l {0}
    run: |
      echo "Debug: Input values"
      echo "item-type: ${{ inputs.item-type }}"
      echo "item-number: ${{ inputs.item-number }}"
      echo "milestone-title: ${{ inputs.milestone-title }}"
      echo "label-to-match: ${{ inputs.label-to-match }}"

  - name: Fetch item details and assign milestone
    id: assign-milestone
    shell: bash -l {0}
    env:
      GITHUB_TOKEN: ${{ inputs.github-token }}
      ITEM_TYPE: ${{ inputs.item-type }}
      ITEM_NUMBER: ${{ inputs.item-number }}
      MILESTONE_TITLE: ${{ inputs.milestone-title }}
      LABEL_TO_MATCH: ${{ inputs.label-to-match }}
    run: |
      set -e

      # Fetch item details
      if [ "$ITEM_TYPE" = "issue" ]; then
        item=$(gh api repos/:owner/:repo/issues/$ITEM_NUMBER)
      elif [ "$ITEM_TYPE" = "pr" ]; then
        item=$(gh api repos/:owner/:repo/pulls/$ITEM_NUMBER)
      else
        echo "Error: Invalid item type"
        exit 1
      fi

      # Fetch milestones
      milestones=$(gh api repos/:owner/:repo/milestones --jq '.[] | select(.state == "open")')

      # Find specified milestone
      milestone=$(echo "$milestones" | jq -r "select(.title == \"$MILESTONE_TITLE\")")

      if [ -z "$milestone" ]; then
        echo "assignment-status=milestone_not_found" >> $GITHUB_OUTPUT
        echo "assigned-milestone=None" >> $GITHUB_OUTPUT
        exit 0
      fi

      milestone_number=$(echo "$milestone" | jq -r '.number')

      # Check if item has matching label
      labels=$(echo "$item" | jq -r '.labels[].name')
      if echo "$labels" | grep -q "$LABEL_TO_MATCH"; then
        # Assign milestone
        if [ "$ITEM_TYPE" = "issue" ]; then
          gh api repos/:owner/:repo/issues/$ITEM_NUMBER -f milestone=$milestone_number
        else
          gh api repos/:owner/:repo/pulls/$ITEM_NUMBER -f milestone=$milestone_number
        fi
        echo "assignment-status=assigned" >> $GITHUB_OUTPUT
        echo "assigned-milestone=$MILESTONE_TITLE" >> $GITHUB_OUTPUT
      else
        echo "assignment-status=label_not_matched" >> $GITHUB_OUTPUT
        echo "assigned-milestone=None" >> $GITHUB_OUTPUT
      fi

  - name: Update milestone progress
    if: steps.assign-milestone.outputs.assignment-status == 'assigned'
    shell: bash -l {0}
    env:
      GITHUB_TOKEN: ${{ inputs.github-token }}
      MILESTONE_TITLE: ${{ inputs.milestone-title }}
    run: |
      set -e

      milestone=$(gh api repos/:owner/:repo/milestones --jq ".[] | select(.title == \"$MILESTONE_TITLE\")")
      milestone_number=$(echo "$milestone" | jq -r '.number')

      issues=$(gh api repos/:owner/:repo/issues -f milestone=$milestone_number -f state=all)
      total_issues=$(echo "$issues" | jq length)
      closed_issues=$(echo "$issues" | jq '[.[] | select(.state == "closed")] | length')

      progress_percentage=$((closed_issues * 100 / total_issues))

      echo "Milestone progress: $progress_percentage%"

  - name: Error handling
    if: failure()
    shell: bash -l {0}
    run: |
      echo "An error occurred during milestone assignment"
      echo "assigned-milestone=None" >> $GITHUB_OUTPUT
      echo "assignment-status=failed" >> $GITHUB_OUTPUT
