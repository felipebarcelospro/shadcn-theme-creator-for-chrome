name: PR Management Workflow

on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches:
      - '**'
  schedule:
    - cron: '0 0 * * *'  # Run daily at midnight UTC

permissions:
  actions: read
  checks: write
  contents: read
  deployments: write
  issues: write
  packages: read
  pull-requests: write
  repository-projects: read
  security-events: read
  statuses: write

jobs:
  pr-management:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Context and Prerequisites
        id: setup
        uses: ./.github/actions/setup-context-and-prerequisites
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          debug: 'false'

      - name: Check Existing PR
        id: check-pr
        uses: ./.github/actions/check-existing-pr
        with:
          branch-name: ${{ github.head_ref }}
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Auto Label
        uses: ./.github/actions/auto-label
        with:
          item-type: 'pr'
          item-number: ${{ github.event.pull_request.number }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          config-data: ${{ steps.setup.outputs.config-data }}

      - name: Auto Assign
        uses: ./.github/actions/auto-assign
        with:
          item-type: 'pr'
          item-number: ${{ github.event.pull_request.number }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          config-data: ${{ steps.setup.outputs.config-data }}

      - name: Analyze Code
        id: analyze
        uses: ./.github/actions/analyze-code
        with:
          source-dir: '.'
          github-token: ${{ secrets.GITHUB_TOKEN }}
          config-data: ${{ steps.setup.outputs.config-data }}

      - name: Run Tests
        id: tests
        uses: ./.github/actions/run-tests
        with:
          package-manager: ${{ steps.setup.outputs.package-manager }}
          config-data: ${{ steps.setup.outputs.config-data }}
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate Review Comments
        id: review-comments
        uses: ./.github/actions/ai-generate-content
        with:
          content-type: "pr_review"
          context-data: |
            {
              "pr-diff": "${{ github.event.pull_request.diff_url }}",
              "analysis-results": "${{ steps.analyze.outputs.quality-report }}",
              "test-results": "${{ steps.tests.outputs.test-results }}"
            }
          template-path: .github/templates/pr_review_template.md
          config-data: ${{ steps.setup.outputs.config-data }}
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Update PR
        uses: ./.github/actions/create-or-update-pr
        with:
          branch-name: ${{ github.head_ref }}
          pr-title: ${{ github.event.pull_request.title }}
          pr-body: ${{ steps.review-comments.outputs.generated-content }}
          base-branch: ${{ github.base_ref }}
          labels: ${{ steps.auto-label.outputs.applied-labels }}
          reviewers: ${{ steps.auto-assign.outputs.assigned-reviewers }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          config-data: ${{ steps.setup.outputs.config-data }}

      - name: Check PR Status
        id: pr-status
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const prNumber = context.issue.number;
            const config = JSON.parse('${{ steps.setup.outputs.config-data }}');
            const staleThreshold = config.pr_management.stale_pr.threshold;
            
            const { data: pr } = await github.rest.pulls.get({
              owner,
              repo,
              pull_number: prNumber
            });
            
            const lastUpdateTime = new Date(pr.updated_at).getTime();
            const currentTime = new Date().getTime();
            const daysSinceLastUpdate = (currentTime - lastUpdateTime) / (1000 * 60 * 60 * 24);
            
            return daysSinceLastUpdate > staleThreshold ? 'stale' : 'active';

      - name: Send Notifications
        uses: ./.github/actions/send-notification
        with:
          notification-type: "pr_status"
          notification-data: |
            {
              "pr-url": "${{ github.event.pull_request.html_url }}",
              "pr-title": "${{ github.event.pull_request.title }}",
              "pr-status": "${{ steps.pr-status.outputs.result }}"
            }
          github-token: ${{ secrets.GITHUB_TOKEN }}
          config-data: ${{ steps.setup.outputs.config-data }}

      - name: Review Stale PRs
        if: github.event_name == 'schedule'
        uses: ./.github/actions/review-stale-prs
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          config-data: ${{ steps.setup.outputs.config-data }}

      - name: Generate PR Health Report
        if: github.event_name == 'schedule'
        uses: ./.github/actions/generate-pr-health-report
        with:
          repository-context: ${{ steps.setup.outputs.repository-context }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          config-data: ${{ steps.setup.outputs.config-data }}
