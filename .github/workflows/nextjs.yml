name: CI/CD Pipeline for Shadcn Theme Creator

on:
  push:
    branches: ["main", "develop", "release/*", "hotfix/*"]
  pull_request:
    branches: ["main", "develop"]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  # Job de Build para a Aplicação Web
  build_web:
    runs-on: ubuntu-latest
    env:
      NEXT_PUBLIC_PLUNK_API_KEY: ${{ secrets.NEXT_PUBLIC_PLUNK_API_KEY }}
      NEXT_PUBLIC_GOOGLE_ANALYTICS_ID: ${{ vars.NEXT_PUBLIC_GOOGLE_ANALYTICS_ID }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'

      - name: Install Dependencies
        run: yarn install

      - name: Cache Turbo Build Setup
        uses: actions/cache@v4
        with:
          path: .turbo
          key: ${{ runner.os }}-turbo-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-turbo-

      - name: Build Web App
        run: yarn turbo run build --filter=web... --env-mode=loose

      - name: Upload Web Artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./apps/web/out

  # Job de Deploy para GitHub Pages
  deploy_pages:
    runs-on: ubuntu-latest
    needs: build_web
    steps:
      - name: Deploy to GitHub Pages
        uses: actions/deploy-pages@v4

  # Job de Build Condicional e Zip para a Extensão do Chrome
  build_extension:
    runs-on: ubuntu-latest
    if: ${{ needs.check_extension_changes.outputs.extension_changed == 'true' }}
    env:
      NEXT_PUBLIC_PLUNK_API_KEY: ${{ secrets.NEXT_PUBLIC_PLUNK_API_KEY }}
      NEXT_PUBLIC_GOOGLE_ANALYTICS_ID: ${{ vars.NEXT_PUBLIC_GOOGLE_ANALYTICS_ID }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'

      - name: Install Dependencies
        run: yarn install

      - name: Build Chrome Extension
        run: yarn turbo run build --filter=chrome-extension...

      - name: Determine Version Bump (GitFlow)
        id: determine_version
        run: |
          branch=$(echo $GITHUB_REF | sed 's/refs\/heads\///')
          if [[ "$branch" == release/* ]]; then
            bump="minor"
          elif [[ "$branch" == hotfix/* ]]; then
            bump="patch"
          else
            bump="patch"
          fi
          version=$(jq -r '.version' apps/chrome-extension/package.json)
          new_version=$(echo $version | awk -F. -v OFS=. '{if ("$bump" == "patch") {$NF += 1} else if ("$bump" == "minor") {$2 += 1; $3=0} else if ("$bump" == "major") {$1 += 1; $2=0; $3=0}; print}')
          echo "New version: $new_version"
          echo "version=$new_version" >> $GITHUB_ENV

          # Atualiza a versão no package.json
          jq --arg version "$new_version" '.version = $version' apps/chrome-extension/package.json > apps/chrome-extension/tmp.json && mv apps/chrome-extension/tmp.json apps/chrome-extension/package.json

      - name: Commit Version Update
        run: |
          git config user.name "GitHub Actions"
          git config user.email "<>"
          git add apps/chrome-extension/package.json
          git commit -m "chore: bump chrome-extension version to ${{ env.version }}"
          git push

      - name: Zip Chrome Extension
        run: |
          mkdir -p releases
          cd apps/chrome-extension/dist
          zip -r ../../releases/STC_Beta_${{ env.version }}.zip .

      - name: Upload Chrome Extension Zip
        uses: actions/upload-artifact@v3
        with:
          name: chrome-extension
          path: releases/STC_Beta_${{ env.version }}.zip

  # Job de Verificação de Mudanças nos Arquivos da Extensão
  check_extension_changes:
    runs-on: ubuntu-latest
    outputs:
      extension_changed: ${{ steps.check.outputs.changed }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Check for Changes in Extension or Packages
        id: check
        run: |
          if git diff --quiet HEAD^ HEAD -- apps/chrome-extension packages; then
            echo "No changes in chrome-extension or packages."
            echo "changed=false" >> $GITHUB_OUTPUT
          else
            echo "Changes detected in chrome-extension or packages."
            echo "changed=true" >> $GITHUB_OUTPUT
          fi

  # Job de Publicação Automática na Chrome Web Store
  publish_chrome_extension:
    runs-on: ubuntu-latest
    needs: build_extension
    if: ${{ needs.build_extension.result == 'success' }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'

      - name: Upload & Publish to Chrome Web Store
        uses: mnao305/chrome-extension-upload@v5.0.0
        with:
          file-path: releases/STC_Beta_${{ env.version }}.zip
          extension-id: ${{ secrets.EXTENSION_ID }}
          client-id: ${{ secrets.CLIENT_ID }}
          client-secret: ${{ secrets.CLIENT_SECRET }}
          refresh-token: ${{ secrets.REFRESH_TOKEN }}
          publish: true

  # Job de Release Automático com Changelog Gerado por IA
  release:
    runs-on: ubuntu-latest
    needs: [build_web, build_extension]
    if: ${{ needs.build_extension.result == 'success' }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'

      - name: Install Dependencies
        run: yarn install

      - name: Generate Release Notes with AI
        id: changelog
        run: |
          commits=$(git log $(git describe --tags --abbrev=0)..HEAD --oneline)
          changelog_response=$(curl -X POST https://api.groq.com/openai/v1/chat/completions \
            -H "Authorization: Bearer ${{ secrets.GROQ_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d '{
              "model": "mixtral-8x7b-32768",
              "messages": [
                {"role": "system", "content": "You are an AI assistant tasked with creating detailed and user-friendly changelogs."},
                {"role": "user", "content": "Create a detailed and user-friendly changelog for the following commits: \"'"$commits"'\""}
              ],
              "temperature": 0.7,
              "max_tokens": 500
            }')
          echo "release_notes=$(echo $changelog_response | jq -r '.choices[0].message.content')" >> $GITHUB_ENV

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            releases/STC_Beta_${{ env.version }}.zip
            apps/web/out/**/*
          tag_name: "chrome-extension-v${{ env.version }}"
          name: "Chrome Extension v${{ env.version }}"
          body: "${{ env.release_notes }}"
