name: 'Create Discussion Post'
description: 'Automatically creates discussion posts for important announcements or to gather feedback'

inputs:
  github-token:
    description: 'GitHub token for API access'
    required: true
  discussion-title:
    description: 'Title of the discussion'
    required: true
  discussion-content:
    description: 'Content of the discussion'
    required: true
  category:
    description: 'Category for the discussion (e.g., Announcements)'
    required: true

outputs:
  created-discussion-url:
    description: 'URL of the created discussion'
  creation-status:
    description: 'Status of the discussion creation process'

runs:
  using: 'composite'
  steps:
  - name: Create Discussion
    shell: bash
    env:
      GH_TOKEN: ${{ inputs.github-token }}
      DISCUSSION_TITLE: ${{ inputs.discussion-title }}
      DISCUSSION_CONTENT: ${{ inputs.discussion-content }}
      CATEGORY: ${{ inputs.category }}
    run: |
      # Validate inputs
      if [ -z "$DISCUSSION_TITLE" ] || [ -z "$DISCUSSION_CONTENT" ] || [ -z "$CATEGORY" ]; then
        echo "Error: All inputs (discussion-title, discussion-content, category) are required."
        exit 1
      fi

      # Get repository information
      REPO_INFO=$(gh repo view --json owner,name)
      OWNER=$(echo $REPO_INFO | jq -r .owner)
      REPO=$(echo $REPO_INFO | jq -r .name)

      # Get category ID
      CATEGORY_ID=$(gh api graphql -f query='
        query($owner:String!, $repo:String!, $category:String!) {
          repository(owner:$owner, name:$repo) {
            discussionCategories(first: 100) {
              nodes {
                id
                name
              }
            }
          }
        }' -f owner=$OWNER -f repo=$REPO -f category=$CATEGORY | jq -r ".data.repository.discussionCategories.nodes[] | select(.name == \"$CATEGORY\") | .id")

      if [ -z "$CATEGORY_ID" ]; then
        echo "Error: Category not found."
        exit 1
      fi

      # Create discussion
      RESPONSE=$(gh api graphql -f query='
        mutation($input: CreateDiscussionInput!) {
          createDiscussion(input: $input) {
            discussion {
              id
              url
            }
          }
        }' -f input="{\"repositoryId\":\"$(gh api graphql -f query='query($owner:String!, $repo:String!) { repository(owner:$owner, name:$repo) { id } }' -F owner=$OWNER -F repo=$REPO | jq -r .data.repository.id)\",\"title\":\"$DISCUSSION_TITLE\",\"body\":\"$DISCUSSION_CONTENT\",\"categoryId\":\"$CATEGORY_ID\"}")

      # Extract discussion URL and ID
      DISCUSSION_URL=$(echo $RESPONSE | jq -r '.data.createDiscussion.discussion.url')
      DISCUSSION_ID=$(echo $RESPONSE | jq -r '.data.createDiscussion.discussion.id')

      if [ -n "$DISCUSSION_URL" ] && [ -n "$DISCUSSION_ID" ]; then
        echo "created-discussion-url=$DISCUSSION_URL" >> $GITHUB_OUTPUT
        echo "creation-status=success" >> $GITHUB_OUTPUT
        echo "Discussion created successfully: $DISCUSSION_URL"
      else
        echo "created-discussion-url=" >> $GITHUB_OUTPUT
        echo "creation-status=failed" >> $GITHUB_OUTPUT
        echo "Error: Failed to create discussion."
        exit 1
      fi
