name: 'Setup Context and Prerequisites'
description: 'Set up necessary context and prerequisites for the workflow'

inputs:
  github-token:
    description: 'GitHub token for API access'
    required: true
  debug:
    description: 'Enable debug mode'
    required: false
    default: 'false'

outputs:
  repository-context:
    description: 'JSON object containing repository context'
  config-data:
    description: 'Parsed configuration data'
  environment-variables:
    description: 'Set environment variables'
  package-manager:
    description: 'Detected package manager'
  installation-status:
    description: 'Status of the installation process'
  changed_files:
    description: 'List of changed files in the current commit or PR'
  apps_configuration:
    description: 'Configuration for all apps in the repository'
  github_pages_urls:
    description: 'URLs of GitHub Pages for the repository'

runs:
  using: "composite"
  steps:
  - name: Setup Bun
    uses: oven-sh/setup-bun@v2
    with:
      bun-version: latest

  - name: Cache dependencies and config
    uses: actions/cache@v3
    id: cache
    with:
      path: |
        ~/.bun
        .github/config.yml
      key: ${{ runner.os }}-deps-${{ hashFiles('**/bun.lockb', '.github/config.yml') }}

  - name: Install action dependencies
    if: steps.cache.outputs.cache-hit != 'true'
    shell: bash
    run: |
      bun add js-yaml @octokit/rest@latest

  - name: Setup Context and Prerequisites
    shell: bash
    env:
      GITHUB_TOKEN: ${{ inputs.github-token }}
      DEBUG: ${{ inputs.debug }}
    run: |
      set -e

      function debug() {
        if [ "$DEBUG" = "true" ]; then
          echo "DEBUG: $1"
        fi
      }

      # Load and parse config.yml
      if [ ! -f ".github/config.yml" ]; then
        echo "Error: config.yml is missing"
        exit 1
      }
      CONFIG_DATA=$(cat .github/config.yml | bun run js-yaml -j)
      echo "config-data=$CONFIG_DATA" >> $GITHUB_OUTPUT
      debug "Config data loaded and parsed"

      # Detect package manager (always Bun in this case)
      PACKAGE_MANAGER="bun"
      echo "package-manager=$PACKAGE_MANAGER" >> $GITHUB_OUTPUT
      debug "Package manager detected: $PACKAGE_MANAGER"

      # Install dependencies if cache miss
      if [ "${{ steps.cache.outputs.cache-hit }}" != "true" ]; then
        bun install
        echo "installation-status=success" >> $GITHUB_OUTPUT
        debug "Dependencies installed successfully"
      else
        echo "installation-status=cached" >> $GITHUB_OUTPUT
        debug "Using cached dependencies"
      fi

      # Fetch repository metadata and changed files using GitHub CLI
      REPO_METADATA=$(gh api repos/${GITHUB_REPOSITORY} --jq .)
      CHANGED_FILES=$(gh pr view ${GITHUB_REF#refs/pull/} --json files --jq '.files[].path')
      echo "changed_files=$CHANGED_FILES" >> $GITHUB_OUTPUT

      # Set up environment variables
      {
        echo "REPO_NAME=${GITHUB_REPOSITORY}"
        echo "REPO_OWNER=${GITHUB_REPOSITORY_OWNER}"
        echo "GITHUB_SHA=${GITHUB_SHA}"
        echo "GITHUB_REF=${GITHUB_REF}"
        echo "PACKAGE_MANAGER=$PACKAGE_MANAGER"
        echo "REPO_TYPE=$(echo "$CONFIG_DATA" | bun run jq -r '.repository.type')"
        echo "MAIN_BRANCHES=$(echo "$CONFIG_DATA" | bun run jq -r '.repository.version_control.main_branches')"
        echo "BRANCH_PREFIXES=$(echo "$CONFIG_DATA" | bun run jq -r '.repository.version_control.branch_prefixes')"
        echo "MERGE_STRATEGY=$(echo "$CONFIG_DATA" | bun run jq -r '.repository.version_control.merge_strategy')"
        echo "PROTECTED_BRANCHES=$(echo "$CONFIG_DATA" | bun run jq -r '.repository.version_control.protected_branches')"
      } >> $GITHUB_ENV
      echo "environment-variables=Environment variables set" >> $GITHUB_OUTPUT

      # Set repository context
      REPOSITORY_CONTEXT=$(bun run jq -n \
        --argjson repoMetadata "$REPO_METADATA" \
        --argjson config "$CONFIG_DATA" \
        --arg branch "${GITHUB_REF#refs/heads/}" \
        --arg commit "$GITHUB_SHA" \
        --arg packageManager "$PACKAGE_MANAGER" \
        --argjson changedFiles "$(echo "$CHANGED_FILES" | bun run jq -R . | bun run jq -s .)" \
        '{
          repoMetadata: $repoMetadata,
          config: $config,
          branch: $branch,
          commit: $commit,
          repoType: $config.repository.type,
          mainBranches: $config.repository.version_control.main_branches,
          branchPrefixes: $config.repository.version_control.branch_prefixes,
          mergeStrategy: $config.repository.version_control.merge_strategy,
          protectedBranches: $config.repository.version_control.protected_branches,
          packageManager: $packageManager,
          changedFiles: $changedFiles
        }')
      echo "repository-context=$REPOSITORY_CONTEXT" >> $GITHUB_OUTPUT

      # Set apps configuration
      echo "apps_configuration=$(echo "$CONFIG_DATA" | bun run jq -r '.packages.package_specific')" >> $GITHUB_OUTPUT

      # Set GitHub Pages URLs
      PAGES_URL="https://${GITHUB_REPOSITORY_OWNER}.github.io/${GITHUB_REPOSITORY#*/}"
      echo "github_pages_urls=[\"$PAGES_URL\"]" >> $GITHUB_OUTPUT

      echo "Setup context and prerequisites completed successfully"

  - name: Cleanup
    if: always()
    shell: bash
    run: |
      rm -rf node_modules
      bun cache clean
