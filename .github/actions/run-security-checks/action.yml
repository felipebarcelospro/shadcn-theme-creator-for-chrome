name: 'Run Security Checks'
description: 'Performs comprehensive security checks on the codebase and dependencies'

inputs:
  github-token:
    description: 'GitHub token for API access'
    required: true
  working-directory:
    description: 'Directory to run security checks in'
    required: false
    default: '.'

outputs:
  security-status:
    description: 'Overall security check status (pass/fail)'
  vulnerability-report:
    description: 'Detailed vulnerability report (JSON object)'
  sarif-output:
    description: 'Path to SARIF output file'

runs:
  using: 'composite'
  steps:
  - name: Checkout repository
    uses: actions/checkout@v3

  - name: Setup security tools
    shell: bash
    run: |
      sudo apt-get update
      sudo apt-get install -y npm python3-pip
      sudo npm install -g npm-audit-html
      pip3 install bandit safety

  - name: Run dependency vulnerability check
    shell: bash
    run: |
      cd ${{ inputs.working-directory }}
      npm audit --json > npm-audit.json
      npm-audit-html -o npm-audit-report.html

  - name: Perform SAST
    shell: bash
    run: |
      cd ${{ inputs.working-directory }}
      bandit -r . -f custom > bandit-report.txt

  - name: Execute secret scanning
    uses: gitleaks/gitleaks-action@v2
    with:
      token: ${{ inputs.github-token }}
      workdir: ${{ inputs.working-directory }}

  - name: Analyze Docker containers
    if: hashFiles('**/Dockerfile') != ''
    shell: bash
    run: |
      docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
        aquasec/trivy image $(docker images -q) > docker-security-report.txt

  - name: Generate comprehensive security report
    shell: bash
    run: |
      echo "Generating comprehensive security report..."
      jq '.' npm-audit.json > vulnerability-report.json
      echo "vulnerability-report=$(cat vulnerability-report.json)" >> $GITHUB_OUTPUT

  - name: Create SARIF output
    shell: bash
    run: |
      echo '{"$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json", "version": "2.1.0", "runs": []}' > sarif-output.json
      echo "sarif-output=$(pwd)/sarif-output.json" >> $GITHUB_OUTPUT

  - name: Set security status
    shell: bash
    run: |
      if [ -s vulnerability-report.json ]; then
        echo "security-status=fail" >> $GITHUB_OUTPUT
      else
        echo "security-status=pass" >> $GITHUB_OUTPUT
      fi

  - name: Handle errors
    if: failure()
    shell: bash
    run: |
      echo "Some security checks failed. Please review the logs for more information."
      echo "security-status=fail" >> $GITHUB_OUTPUT
