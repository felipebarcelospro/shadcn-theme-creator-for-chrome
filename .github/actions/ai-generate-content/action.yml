name: 'AI Generate Content'
description: 'Leverages Google AI Studio with Gemini 1.5PRO to automatically generate high-quality content'

inputs:
  content-type:
    description: 'Type of content to generate (PR description, issue response, etc.)'
    required: true
  context-data:
    description: 'JSON string containing relevant context data'
    required: true
  template-path:
    description: 'Path to content template file'
    required: false
  additional-context:
    description: 'Additional context or instructions for the AI'
    required: false
  tone:
    description: 'Desired tone of the generated content (formal, casual, technical, etc.)'
    required: false
    default: 'neutral'
  max-length:
    description: 'Maximum length of the generated content in characters'
    required: false
    default: '2000'
  github-token:
    description: 'GitHub token for API access'
    required: true
  debug:
    description: 'Enable debug mode'
    required: false
    default: 'false'

outputs:
  generated-content:
    description: 'The AI-generated content'
  generation-metadata:
    description: 'Metadata about the generation process (model used, confidence score, etc.)'

runs:
  using: "composite"
  steps:
  - name: Cache dependencies
    uses: actions/cache@v3
    id: cache
    with:
      path: ~/.npm
      key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
      restore-keys: |
        ${{ runner.os }}-node-

  - name: Install dependencies
    if: steps.cache.outputs.cache-hit != 'true'
    shell: bash
    run: npm ci

  - name: AI Generate Content
    uses: actions/github-script@v6
    with:
      github-token: ${{ inputs.github-token }}
      script: |
        const fs = require('fs');
        const axios = require('axios');

        const DEBUG = '${{ inputs.debug }}' === 'true';

        function debug(message) {
          if (DEBUG) console.log(`DEBUG: ${message}`);
        }

        try {
          // Prepare AI prompt
          const prompt = `
            Generate ${{ inputs.content-type }} content with the following context:
            ${{ inputs.context-data }}

            Additional instructions:
            ${{ inputs.additional-context }}

            Please use a ${{ inputs.tone }} tone and limit the response to ${{ inputs.max-length }} characters.

            If a template is provided, use it as a guide for the structure and format of the content.
          `;
          debug('Prompt prepared');

          // Load template if provided
          let template = '';
          if ('${{ inputs.template-path }}') {
            template = fs.readFileSync('${{ inputs.template-path }}', 'utf8');
            debug('Template loaded');
          }

          // Generate content
          const response = await axios.post(
            'https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-pro:generateContent',
            {
              contents: [{ parts: [{ text: prompt }] }],
              generationConfig: {
                temperature: 0.7,
                topK: 40,
                topP: 0.95,
                maxOutputTokens: Math.floor(${{ inputs.max-length }} / 4)
              }
            },
            {
              headers: {
                'Authorization': `Bearer ${process.env.GOOGLE_AI_API_KEY}`,
                'Content-Type': 'application/json'
              }
            }
          );

          const content = response.data.candidates[0].content.parts[0].text;
          const metadata = JSON.stringify(response.data.candidates[0].safetyRatings);

          core.setOutput('generated-content', content);
          core.setOutput('generation-metadata', metadata);

          debug('Content generated successfully');
          debug(`Generated content: ${content}`);
          debug(`Generation metadata: ${metadata}`);

        } catch (error) {
          core.setFailed(`Action failed: ${error.message}`);
          if (DEBUG) console.error(error);
        }

  - name: Cleanup
    if: always()
    shell: bash
    run: |
      rm -rf node_modules
      npm cache clean --force
