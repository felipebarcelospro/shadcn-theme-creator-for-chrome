name: 'Send Notification'
description: 'Sends a notification to specified channels based on configuration'

inputs:
  github-token:
    description: 'GitHub token for API access'
    required: true
  notification-type:
    description: 'Type of notification (e.g., release, setup_completion, ci_cd_status)'
    required: true
  notification-data:
    description: 'JSON string containing notification details'
    required: true
  config-path:
    description: 'Path to the configuration file'
    required: false
    default: '.github/config.yml'

outputs:
  notification-sent:
    description: 'Boolean indicating whether the notification was sent successfully'

runs:
  using: 'composite'
  steps:
  - name: Checkout repository
    uses: actions/checkout@v3

  - name: Setup Node.js
    uses: actions/setup-node@v3
    with:
      node-version: '20'

  - name: Install dependencies
    shell: bash -l {0}
    run: npm install @actions/github @actions/core js-yaml

  - name: Load configuration and generate content
    id: load-config-and-generate
    shell: node
    env:
      GITHUB_TOKEN: ${{ inputs.github-token }}
      NOTIFICATION_TYPE: ${{ inputs.notification-type }}
      NOTIFICATION_DATA: ${{ inputs.notification-data }}
      CONFIG_PATH: ${{ inputs.config-path }}
    run: |
      const github = require('@actions/github');
      const core = require('@actions/core');
      const fs = require('fs');
      const yaml = require('js-yaml');

      async function run() {
        try {
          const config = yaml.load(fs.readFileSync(process.env.CONFIG_PATH, 'utf8'));
          const notificationData = JSON.parse(process.env.NOTIFICATION_DATA);

          // Generate content (simplified for this example)
          const generatedContent = `Notification: ${process.env.NOTIFICATION_TYPE}\nDetails: ${JSON.stringify(notificationData)}`;

          core.setOutput('config', JSON.stringify(config));
          core.setOutput('generated-content', generatedContent);
        } catch (error) {
          core.setFailed(`Error in configuration loading or content generation: ${error.message}`);
        }
      }

      run();

  - name: Send Slack notification
    if: ${{ fromJson(steps.load-config-and-generate.outputs.config).notifications.channels.contains('slack') }}
    uses: 8398a7/action-slack@v3
    with:
      status: custom
      custom_payload: |
        {
          "text": ${{ steps.load-config-and-generate.outputs.generated-content }},
          "username": ${{ fromJson(steps.load-config-and-generate.outputs.config).notifications.slack.username }},
          "icon_emoji": ${{ fromJson(steps.load-config-and-generate.outputs.config).notifications.slack.icon_emoji }}
        }
    env:
      GITHUB_TOKEN: ${{ inputs.github-token }}
      SLACK_WEBHOOK_URL: ${{ fromJson(steps.load-config-and-generate.outputs.config).notifications.slack.webhook_url }}

  - name: Send Discord notification
    if: ${{ fromJson(steps.load-config-and-generate.outputs.config).notifications.channels.contains('discord') }}
    uses: Ilshidur/action-discord@master
    env:
      DISCORD_WEBHOOK: ${{ fromJson(steps.load-config-and-generate.outputs.config).notifications.discord.webhook_url }}
    with:
      args: ${{ steps.load-config-and-generate.outputs.generated-content }}

  - name: Send Telegram notification
    if: ${{ fromJson(steps.load-config-and-generate.outputs.config).notifications.channels.contains('telegram') }}
    uses: appleboy/telegram-action@master
    with:
      to: ${{ fromJson(steps.load-config-and-generate.outputs.config).notifications.telegram.chat_id }}
      token: ${{ fromJson(steps.load-config-and-generate.outputs.config).notifications.telegram.bot_token }}
      message: ${{ steps.load-config-and-generate.outputs.generated-content }}

  - name: Set output
    id: set-output
    shell: bash -l {0}
    run: |
      echo "notification-sent=true" >> $GITHUB_OUTPUT

  - name: Error handling
    if: failure()
    shell: bash -l {0}
    run: |
      echo "Failed to send one or more notifications."
      echo "notification-sent=false" >> $GITHUB_OUTPUT
