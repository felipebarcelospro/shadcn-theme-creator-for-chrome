name: 'Prioritize Issue'
description: 'Automatically prioritizes new issues based on predefined rules'

inputs:
  github-token:
    description: 'GitHub token for API access'
    required: true
  issue-number:
    description: 'Number of the issue to prioritize'
    required: true
  prioritization-rules:
    description: 'JSON string containing prioritization rules'
    required: true

outputs:
  assigned-priority:
    description: 'Priority level assigned to the issue'
  prioritization-reasoning:
    description: 'Explanation of why the priority was assigned'

runs:
  using: 'composite'
  steps:
  - name: Checkout repository
    uses: actions/checkout@v3

  - name: Setup Python
    uses: actions/setup-python@v4
    with:
      python-version: '3.x'

  - name: Install dependencies
    shell: bash -l {0}
    run: pip install PyGithub

  - name: Prioritize Issue
    id: prioritize
    shell: python
    env:
      GITHUB_TOKEN: ${{ inputs.github-token }}
      ISSUE_NUMBER: ${{ inputs.issue-number }}
      PRIORITIZATION_RULES: ${{ inputs.prioritization-rules }}
    run: |
      import os
      import json
      from github import Github

      # Initialize GitHub client
      g = Github(os.environ['GITHUB_TOKEN'])
      repo = g.get_repo(os.environ['GITHUB_REPOSITORY'])
      issue = repo.get_issue(int(os.environ['ISSUE_NUMBER']))

      # Load prioritization rules
      rules = json.loads(os.environ['PRIORITIZATION_RULES'])

      # Implement prioritization logic here
      # This is a placeholder implementation
      priority = 'medium'
      reasoning = 'Default priority assigned'

      # Example of how you might use the rules:
      for rule in rules:
        if rule['condition'] in issue.title.lower():
          priority = rule['priority']
          reasoning = rule['reason']
          break

      # Update issue with priority
      issue.add_to_labels(f"priority:{priority}")
      issue.edit(body=f"{issue.body}\n\n## Prioritization\nPriority: {priority}\nReasoning: {reasoning}")

      # Set outputs
      print(f"::set-output name=assigned-priority::{priority}")
      print(f"::set-output name=prioritization-reasoning::{reasoning}")

  - name: Error handling
    if: failure()
    shell: bash -l {0}
    run: |
      echo "An error occurred during the prioritization process"
      echo "assigned-priority=undefined" >> $GITHUB_OUTPUT
      echo "prioritization-reasoning=Prioritization failed due to an error" >> $GITHUB_OUTPUT
