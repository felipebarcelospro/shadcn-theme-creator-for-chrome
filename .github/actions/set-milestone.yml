name: 'Set Milestone'
description: 'Automatically assigns issues and PRs to appropriate milestones'

inputs:
  item-type:
    description: 'Type of item to assign milestone (issue/pr)'
    required: true
  item-number:
    description: 'Number of the issue or PR'
    required: true
  milestone-title:
    description: 'Title of the milestone to assign'
    required: true
  label-to-match:
    description: 'Label to match for milestone assignment'
    required: true

outputs:
  assigned-milestone:
    description: 'Name or number of the assigned milestone'
  assignment-status:
    description: 'Status of the milestone assignment operation'

runs:
  using: 'composite'
  steps:
  - name: Debug inputs
    shell: bash
    run: |
      echo "Debug: Input values"
      echo "item-type: ${{ inputs.item-type }}"
      echo "item-number: ${{ inputs.item-number }}"
      echo "milestone-title: ${{ inputs.milestone-title }}"
      echo "label-to-match: ${{ inputs.label-to-match }}"

  - name: Fetch item details
    id: fetch-item
    uses: actions/github-script@v6
    with:
      github-token: ${{ secrets.GITHUB_TOKEN }}
      script: |
        const { owner, repo } = context.repo;
        const itemType = '${{ inputs.item-type }}';
        const itemNumber = '${{ inputs.item-number }}';
        let item;
        if (itemType === 'issue') {
          const { data: issue } = await github.rest.issues.get({
            owner,
            repo,
            issue_number: itemNumber
          });
          item = issue;
        } else if (itemType === 'pr') {
          const { data: pr } = await github.rest.pulls.get({
            owner,
            repo,
            pull_number: itemNumber
          });
          item = pr;
        }
        return item;

  - name: Assign milestone
    id: assign-milestone
    uses: actions/github-script@v6
    with:
      github-token: ${{ secrets.GITHUB_TOKEN }}
      script: |
        const item = ${{ steps.fetch-item.outputs.result }};
        const { owner, repo } = context.repo;
        const milestoneTitle = '${{ inputs.milestone-title }}';
        const labelToMatch = '${{ inputs.label-to-match }}';

        let assignedMilestone = null;
        let assignmentStatus = 'not_assigned';

        try {
          // Fetch current milestones
          const { data: milestones } = await github.rest.issues.listMilestones({
            owner,
            repo,
            state: 'open'
          });

          // Find the specified milestone
          assignedMilestone = milestones.find(m => m.title === milestoneTitle);

          if (assignedMilestone && item.labels.some(label => label.name === labelToMatch)) {
            // Assign item to milestone
            await github.rest.issues.update({
              owner,
              repo,
              issue_number: item.number,
              milestone: assignedMilestone.number
            });
            assignmentStatus = 'assigned';
          } else if (!assignedMilestone) {
            assignmentStatus = 'milestone_not_found';
          } else {
            assignmentStatus = 'label_not_matched';
          }
        } catch (error) {
          console.error('Error assigning milestone:', error);
          assignmentStatus = 'error';
        }

        // Set outputs
        core.setOutput('assigned-milestone', assignedMilestone ? assignedMilestone.title : 'None');
        core.setOutput('assignment-status', assignmentStatus);

  - name: Update milestone progress
    if: steps.assign-milestone.outputs.assignment-status == 'assigned'
    uses: actions/github-script@v6
    with:
      github-token: ${{ secrets.GITHUB_TOKEN }}
      script: |
        const { owner, repo } = context.repo;
        const milestoneNumber = ${{ fromJson(steps.assign-milestone.outputs.result).number }};

        try {
          const { data: milestone } = await github.rest.issues.getMilestone({
            owner,
            repo,
            milestone_number: milestoneNumber
          });

          const { data: issues } = await github.rest.issues.listForRepo({
            owner,
            repo,
            milestone: milestoneNumber,
            state: 'all'
          });

          const totalIssues = issues.length;
          const closedIssues = issues.filter(issue => issue.state === 'closed').length;
          const progressPercentage = Math.round((closedIssues / totalIssues) * 100);

          console.log(`Milestone progress: ${progressPercentage}%`);
        } catch (error) {
          console.error('Error updating milestone progress:', error);
        }

  - name: Error handling
    if: failure()
    shell: bash
    run: |
      echo "An error occurred during milestone assignment"
      echo "assigned-milestone=None" >> $GITHUB_OUTPUT
      echo "assignment-status=failed" >> $GITHUB_OUTPUT
