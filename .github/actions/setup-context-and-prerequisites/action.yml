name: 'Setup Context and Prerequisites'
description: 'Set up necessary context and prerequisites for the workflow'

inputs:
  github-token:
    description: 'GitHub token for API access'
    required: true
    shell: bash

outputs:
  repository-context:
    description: 'JSON object containing repository context'
  config-data:
    description: 'Parsed configuration data'
  environment-variables:
    description: 'Set environment variables'

runs:
  using: 'composite'
  steps:
  - name: Checkout repository
    uses: actions/checkout@v3

  - name: Setup Node.js
    uses: actions/setup-node@v3
    with:
      node-version: '20'

  - name: Cache dependencies
    uses: actions/cache@v3
    with:
      path: ~/.npm
      key: ${{ runner.OS }}-node-${{ hashFiles('**/package-lock.json') }}
      restore-keys: |
        ${{ runner.OS }}-node-

  - name: Install dependencies
    shell: bash
    run: |
      npm ci

  - name: Fetch repository metadata
    id: repo-metadata
    uses: actions/github-script@v6
    with:
      github-token: ${{ inputs.github-token }}
      script: |
        const { owner, repo } = context.repo;
        try {
          const repoData = await github.rest.repos.get({ owner, repo });
          return repoData.data;
        } catch (error) {
          core.setFailed(`Failed to fetch repository metadata: ${error.message}`);
        }

  - name: Load and parse config.yml
    id: config
    shell: bash
    run: |
      CONFIG_PATH='.github/config.yml'
      if [ ! -f "$CONFIG_PATH" ]; then
        echo "::error::config.yml is missing"
        exit 1
      fi
      CONFIG_DATA=$(yq eval -o=json "$CONFIG_PATH")
      echo "config-data=$CONFIG_DATA" >> $GITHUB_OUTPUT

  - name: Set up environment variables
    id: set-env-vars
    shell: bash
    run: |
      echo "REPO_NAME=${{ github.repository }}" >> $GITHUB_ENV
      echo "REPO_OWNER=${{ github.repository_owner }}" >> $GITHUB_ENV
      echo "GITHUB_SHA=${{ github.sha }}" >> $GITHUB_ENV
      echo "GITHUB_REF=${{ github.ref }}" >> $GITHUB_ENV

      CONFIG_DATA='${{ steps.config.outputs.config-data }}'
      REPO_TYPE=$(echo "$CONFIG_DATA" | jq -r '.repository.type')
      MAIN_BRANCHES=$(echo "$CONFIG_DATA" | jq -r '.version_control.main_branches')

      echo "REPO_TYPE=$REPO_TYPE" >> $GITHUB_ENV
      echo "MAIN_BRANCHES=$MAIN_BRANCHES" >> $GITHUB_ENV

      echo "environment-variables=Environment variables set" >> $GITHUB_OUTPUT

  - name: Validate repository settings
    shell: bash
    run: |
      REPO_METADATA='${{ steps.repo-metadata.outputs.result }}'
      CONFIG_DATA='${{ steps.config.outputs.config-data }}'

      HAS_ISSUES=$(echo "$REPO_METADATA" | jq -r '.has_issues')
      HAS_PROJECTS=$(echo "$REPO_METADATA" | jq -r '.has_projects')
      AUTO_LABELING=$(echo "$CONFIG_DATA" | jq -r '.issue_management.auto_labeling.enabled')
      REPO_TYPE=$(echo "$CONFIG_DATA" | jq -r '.repository.type')

      if [ "$HAS_ISSUES" = "false" ] && [ "$AUTO_LABELING" = "true" ]; then
        echo "::warning::Issues are not enabled for this repository, but issue management is configured"
      fi

      if [ "$HAS_PROJECTS" = "false" ] && [ "$REPO_TYPE" = "monorepo" ]; then
        echo "::warning::Projects are not enabled for this repository, but it is configured as a monorepo"
      fi

  - name: Determine current branch and commit information
    shell: bash
    run: |
      CURRENT_BRANCH=${GITHUB_REF#refs/heads/}
      CURRENT_COMMIT=$GITHUB_SHA
      echo "CURRENT_BRANCH=$CURRENT_BRANCH" >> $GITHUB_ENV
      echo "CURRENT_COMMIT=$CURRENT_COMMIT" >> $GITHUB_ENV

  - name: Create repository context
    id: repo-context
    shell: bash
    run: |
      REPO_METADATA='${{ steps.repo-metadata.outputs.result }}'
      CONFIG_DATA='${{ steps.config.outputs.config-data }}'
      CONTEXT=$(jq -n \
        --argjson repoMetadata "$REPO_METADATA" \
        --argjson config "$CONFIG_DATA" \
        --arg branch "$CURRENT_BRANCH" \
        --arg commit "$CURRENT_COMMIT" \
        --arg repoType "$REPO_TYPE" \
        --argjson mainBranches "$MAIN_BRANCHES" \
        '{
          repoMetadata: $repoMetadata,
          config: $config,
          branch: $branch,
          commit: $commit,
          repoType: $repoType,
          mainBranches: $mainBranches
        }'
      )
      echo "repository-context=$CONTEXT" >> $GITHUB_OUTPUT

  - name: Output results
    shell: bash
    run: |
      echo "Repository context: ${{ steps.repo-context.outputs.repository-context }}"
      echo "Configuration data: ${{ steps.config.outputs.config-data }}"
      echo "Environment variables: ${{ steps.set-env-vars.outputs.environment-variables }}"
      echo "Setup context and prerequisites completed successfully"
