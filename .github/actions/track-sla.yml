name: 'Track SLA'
description: 'Automatically tracks and enforces Service Level Agreements (SLAs) for issues and PRs'

inputs:
  item-type:
    description: 'Type of item to track SLA (issue/pr)'
    required: true
  item-number:
    description: 'Number of the issue or PR'
    required: true
  sla-timeframe:
    description: 'SLA timeframe in minutes'
    required: true
  warning-threshold:
    description: 'Warning threshold in minutes before SLA breach'
    required: true

outputs:
  sla-status:
    description: 'Current SLA status (e.g., "within SLA", "at risk", "breached")'
  time-remaining:
    description: 'Time remaining before SLA breach (in minutes)'

runs:
  using: 'composite'
  steps:
  - name: Debug inputs
    shell: bash
    run: |
      echo "Debug: Input values"
      echo "item-type: ${{ inputs.item-type }}"
      echo "item-number: ${{ inputs.item-number }}"
      echo "sla-timeframe: ${{ inputs.sla-timeframe }}"
      echo "warning-threshold: ${{ inputs.warning-threshold }}"

  - name: Fetch item details
    id: fetch-item
    uses: actions/github-script@v6
    with:
      github-token: ${{ secrets.GITHUB_TOKEN }}
      script: |
        const { owner, repo } = context.repo;
        const itemType = '${{ inputs.item-type }}';
        const itemNumber = '${{ inputs.item-number }}';
        let item;
        if (itemType === 'issue') {
          const { data: issue } = await github.rest.issues.get({
            owner,
            repo,
            issue_number: itemNumber
          });
          item = issue;
        } else if (itemType === 'pr') {
          const { data: pr } = await github.rest.pulls.get({
            owner,
            repo,
            pull_number: itemNumber
          });
          item = pr;
        }
        return item;

  - name: Calculate SLA status
    id: calculate-sla
    uses: actions/github-script@v6
    with:
      github-token: ${{ secrets.GITHUB_TOKEN }}
      script: |
        const item = ${{ steps.fetch-item.outputs.result }};
        const createdAt = new Date(item.created_at);
        const now = new Date();
        const elapsedTime = (now - createdAt) / (1000 * 60); // in minutes

        const slaTimeframe = parseInt('${{ inputs.sla-timeframe }}');
        const warningThreshold = parseInt('${{ inputs.warning-threshold }}');

        let slaStatus = 'within SLA';
        let timeRemaining = slaTimeframe - elapsedTime;

        if (timeRemaining <= 0) {
          slaStatus = 'breached';
          timeRemaining = 0;
        } else if (timeRemaining <= warningThreshold) {
          slaStatus = 'at risk';
        }

        return { slaStatus, timeRemaining: Math.round(timeRemaining) };

  - name: Update item with SLA info
    uses: actions/github-script@v6
    with:
      github-token: ${{ secrets.GITHUB_TOKEN }}
      script: |
        const { owner, repo } = context.repo;
        const itemType = '${{ inputs.item-type }}';
        const itemNumber = '${{ inputs.item-number }}';
        const { slaStatus, timeRemaining } = ${{ steps.calculate-sla.outputs.result }};

        const slaInfo = `
        ## SLA Status
        - Current status: ${slaStatus}
        - Time remaining: ${timeRemaining} minutes
        `;

        if (itemType === 'issue') {
          await github.rest.issues.update({
            owner,
            repo,
            issue_number: itemNumber,
            body: slaInfo
          });
        } else if (itemType === 'pr') {
          await github.rest.pulls.update({
            owner,
            repo,
            pull_number: itemNumber,
            body: slaInfo
          });
        }

  - name: Apply SLA labels
    uses: actions/github-script@v6
    with:
      github-token: ${{ secrets.GITHUB_TOKEN }}
      script: |
        const { owner, repo } = context.repo;
        const itemNumber = '${{ inputs.item-number }}';
        const { slaStatus } = ${{ steps.calculate-sla.outputs.result }};

        const labelMap = {
          'within SLA': 'SLA: On Track',
          'at risk': 'SLA: At Risk',
          'breached': 'SLA: Breached'
        };

        await github.rest.issues.addLabels({
          owner,
          repo,
          issue_number: itemNumber,
          labels: [labelMap[slaStatus]]
        });

  - name: Set outputs
    id: set-outputs
    shell: bash
    run: |
      echo "sla-status=${{ fromJson(steps.calculate-sla.outputs.result).slaStatus }}" >> $GITHUB_OUTPUT
      echo "time-remaining=${{ fromJson(steps.calculate-sla.outputs.result).timeRemaining }}" >> $GITHUB_OUTPUT

  - name: Error handling
    if: failure()
    shell: bash
    run: |
      echo "An error occurred during SLA tracking"
      echo "sla-status=error" >> $GITHUB_OUTPUT
      echo "time-remaining=0" >> $GITHUB_OUTPUT
