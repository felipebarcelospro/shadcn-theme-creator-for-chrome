name: Branch Management

on:
  schedule:
    - cron: '0 0 * * *'  # Run daily at midnight UTC
  push:
    branches:
      - 'feature/**'
      - 'release/**'
      - 'hotfix/**'
      - 'chore/**'
      - 'fix/**'
  workflow_dispatch:  # Allow manual triggering

permissions:
  contents: write
  pages: write
  id-token: write
  pull-requests: write
  issues: write

jobs:
  process_branch:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set branch name
        id: set_branch
        run: |
          if [[ "${{ github.event_name }}" == "push" ]]; then
            echo "BRANCH_NAME=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV
          else
            echo "BRANCH_NAME=" >> $GITHUB_ENV
          fi

      - name: Fetch develop branch
        run: git fetch origin develop

      - name: Check for Commits
        id: check_commits
        run: |
          if [[ -n "$BRANCH_NAME" ]]; then
            commits=$(git log --oneline origin/develop..$BRANCH_NAME 2>/dev/null || echo "")
            if [[ -z "$commits" ]]; then
              echo "NO_COMMITS=true" >> $GITHUB_ENV
              echo "Branch $BRANCH_NAME is synchronized with develop"
            else
              echo "NO_COMMITS=false" >> $GITHUB_ENV
              echo "Found commits in $BRANCH_NAME:"
              echo "$commits"
            fi
          else
            echo "NO_COMMITS=false" >> $GITHUB_ENV
          fi

      - name: Generate PR Content
        if: env.NO_COMMITS == 'false'
        id: pr_content
        env:
          GROQ_API_KEY: ${{ secrets.GROQ_API_KEY }}
        run: |
          set -e
          echo "Generating PR content for branch: $BRANCH_NAME"
          commits=$(git log --format=%B origin/develop..$BRANCH_NAME)
          
          pr_data=$(curl -X POST https://api.groq.com/openai/v1/chat/completions \
            -H "Authorization: Bearer $GROQ_API_KEY" \
            -H "Content-Type: application/json" \
            -d '{
              "model": "llama-3.1-70b-versatile",
              "messages": [
                {"role": "system", "content": "You are an AI assistant tasked with creating pull request titles and descriptions. Respond in JSON format with keys '"'"'title'"'"' and '"'"'body'"'"'."},
                {"role": "user", "content": "Create a pull request title and description for the following branch and commits: Branch: '"'"'$BRANCH_NAME'"'"', Commits: '"'"'$commits'"'"'"}
              ],
              "temperature": 0.7,
              "response_format": {"type": "json_object"}
            }')
          
          echo "PR_TITLE=$(echo $pr_data | jq -r '.choices[0].message.content.title')" >> $GITHUB_ENV
          echo "PR_BODY=$(echo $pr_data | jq -r '.choices[0].message.content.body')" >> $GITHUB_ENV

      - name: Create or Update Pull Request
        if: env.NO_COMMITS == 'false'
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          set -e
          echo "Processing PR for branch: $BRANCH_NAME"
          
          existing_pr=$(gh pr list --head "$BRANCH_NAME" --base develop --json number --jq '.[0].number')
          
          if [ -z "$existing_pr" ]; then
            echo "Creating new PR for $BRANCH_NAME"
            gh pr create --title "$PR_TITLE" --body "$PR_BODY" --base develop --head "$BRANCH_NAME" || {
              echo "Failed to create PR. This might be due to no new commits or other issues."
              exit 0
            }
          else
            echo "Updating existing PR #$existing_pr for $BRANCH_NAME"
            gh pr edit "$existing_pr" --title "$PR_TITLE" --body "$PR_BODY"
          fi

          issues=$(gh issue list --search "$BRANCH_NAME" --json number,title)
          if [ -n "$issues" ]; then
            echo "Linking related issues to PR"
            echo "$issues" | jq -r '.[] | "- #\(.number) \(.title)"' >> $PR_BODY
            gh pr edit --body "$PR_BODY"
            
            echo "$issues" | jq -r '.[]' | while read -r issue; do
              number=$(echo $issue | jq -r '.number')
              gh issue comment $number --body "This issue is addressed in PR #$(gh pr view --json number -q .number)"
            done
          fi

  check_open_branches:
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for Open Branches without PRs
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e
          echo "Fetching all branches..."
          git fetch --all
          
          echo "Checking for branches without PRs..."
          branches=$(git branch -r | grep -vE 'origin/(develop|main)' | grep -E 'origin/(feature|release|hotfix|chore|fix)/' | sed 's/origin\///')
          for branch in $branches; do
            pr_exists=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
              "https://api.github.com/repos/${{ github.repository }}/pulls?head=${{ github.repository_owner }}:$branch&base=develop&state=open" | jq length)
            if [ "$pr_exists" -eq 0 ]; then
              echo "Processing branch without PR: $branch"
              git checkout $branch
              ./.github/workflows/branch-management.yml
            fi
          done