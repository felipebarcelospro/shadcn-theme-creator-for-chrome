name: 'Deploy to Docker'
description: 'Deploys an application to Docker registry using best practices'

inputs:
  artifacts-path:
    description: 'Path to build artifacts'
    required: true
  docker-username:
    description: 'Docker registry username'
    required: true
  docker-password:
    description: 'Docker registry password'
    required: true
  image-name:
    description: 'Name of the Docker image'
    required: true
  image-tag:
    description: 'Tag for the Docker image'
    required: true
    default: 'latest'

outputs:
  deployment-status:
    description: 'Status of the deployment (success/failure)'
  image-url:
    description: 'URL of the deployed Docker image'

runs:
  using: 'composite'
  steps:
  - name: Debug - Print Inputs
    shell: bash
    run: |
      echo "Artifacts Path: ${{ inputs.artifacts-path }}"
      echo "Image Name: ${{ inputs.image-name }}"
      echo "Image Tag: ${{ inputs.image-tag }}"

  - name: Install dependencies
    uses: ./.github/actions/install-dependencies
    with:
      package-manager: 'npm'
      cache-key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

  - name: Debug - Check Dependencies
    shell: bash
    run: |
      echo "Installed Dependencies:"
      npm list --depth=0

  - name: Set up Docker Buildx
    uses: docker/setup-buildx-action@v2

  - name: Debug - Docker Info
    shell: bash
    run: |
      docker info
      docker buildx version

  - name: Login to Docker Hub
    uses: docker/login-action@v2
    with:
      username: ${{ inputs.docker-username }}
      password: ${{ inputs.docker-password }}

  - name: Debug - Docker Login Status
    shell: bash
    run: |
      echo "Docker login status: $?"

  - name: Build and push Docker image
    id: docker_build
    uses: docker/build-push-action@v4
    with:
      context: ${{ inputs.artifacts-path }}
      push: true
      tags: ${{ inputs.image-name }}:${{ inputs.image-tag }}
      cache-from: type=registry,ref=${{ inputs.image-name }}:buildcache
      cache-to: type=registry,ref=${{ inputs.image-name }}:buildcache,mode=max

  - name: Debug - Docker Build Output
    shell: bash
    run: |
      echo "Docker build status: ${{ steps.docker_build.outcome }}"
      echo "Docker image digest: ${{ steps.docker_build.outputs.digest }}"

  - name: Scan Docker image
    uses: anchore/scan-action@v3
    with:
      image: ${{ inputs.image-name }}:${{ inputs.image-tag }}
      fail-build: false
      severity-cutoff: high

  - name: Debug - Image Scan Results
    shell: bash
    run: |
      echo "Scan completed. Check the action output for detailed results."

  - name: Check deployment status
    id: check_status
    shell: bash
    run: |
      if [ "${{ steps.docker_build.outcome }}" = "success" ]; then
        echo "deployment-status=success" >> $GITHUB_OUTPUT
        echo "image-url=docker.io/${{ inputs.image-name }}:${{ inputs.image-tag }}" >> $GITHUB_OUTPUT
        echo "Deployment successful. Image URL: docker.io/${{ inputs.image-name }}:${{ inputs.image-tag }}"
      else
        echo "deployment-status=failure" >> $GITHUB_OUTPUT
        echo "Deployment failed. Check previous steps for errors."
        exit 1
      fi

  - name: Error handling
    if: failure()
    shell: bash
    run: |
      echo "Deployment to Docker failed. Check logs for details."
      echo "deployment-status=failure" >> $GITHUB_OUTPUT
      echo "Last 10 lines of Docker daemon logs:"
      sudo tail -n 10 /var/log/docker.log || echo "Unable to access Docker logs"

