name: 'Get Version'
description: 'Determines the next version number based on the release type'

inputs:
  release_type:
    description: 'Type of release (major/minor/patch)'
    required: true
    default: 'patch'
  current_version:
    description: 'Current version number (optional)'
    required: false

outputs:
  new_version:
    description: 'The new version number'
    value: ${{ steps.calculate-version.outputs.new_version }}
  previous_version:
    description: 'The previous version number'
    value: ${{ steps.get-previous-version.outputs.previous_version }}

runs:
  using: 'composite'
  steps:
  - name: Get previous version
    id: get-previous-version
    shell: bash -l {0}
    run: |
      if [ -n "${{ inputs.current_version }}" ]; then
        echo "previous_version=${{ inputs.current_version }}" >> $GITHUB_OUTPUT
      else
        previous_version=$(git describe --tags --abbrev=0 2>/dev/null || echo "0.0.0")
        echo "previous_version=${previous_version#v}" >> $GITHUB_OUTPUT
      fi

  - name: Calculate new version
    id: calculate-version
    shell: bash -l {0}
    run: |
      previous_version="${{ steps.get-previous-version.outputs.previous_version }}"
      IFS='.' read -ra version_parts <<< "$previous_version"
      major=${version_parts[0]}
      minor=${version_parts[1]}
      patch=${version_parts[2]}

      case "${{ inputs.release_type }}" in
        major)
          new_version="$((major + 1)).0.0"
          ;;
        minor)
          new_version="${major}.$((minor + 1)).0"
          ;;
        patch)
          new_version="${major}.${minor}.$((patch + 1))"
          ;;
        *)
          echo "Invalid release type: ${{ inputs.release_type }}"
          exit 1
          ;;
      esac

      echo "new_version=${new_version}" >> $GITHUB_OUTPUT

  - name: Debug output
    shell: bash -l {0}
    run: |
      echo "Previous version: ${{ steps.get-previous-version.outputs.previous_version }}"
      echo "New version: ${{ steps.calculate-version.outputs.new_version }}"
      echo "Release type: ${{ inputs.release_type }}"
