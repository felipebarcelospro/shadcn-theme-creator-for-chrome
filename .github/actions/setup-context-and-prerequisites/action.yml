name: 'Setup Context and Prerequisites'
description: 'Set up necessary context and prerequisites for the workflow'

inputs:
  github-token:
    description: 'GitHub token for API access'
    required: true
  debug:
    description: 'Enable debug mode'
    required: false
    default: 'false'

outputs:
  repository-context:
    description: 'JSON object containing repository context'
  config-data:
    description: 'Parsed configuration data'
  environment-variables:
    description: 'Set environment variables'
  package-manager:
    description: 'Detected package manager'
  installation-status:
    description: 'Status of the installation process'
  changed_files:
    description: 'List of changed files in the current commit or PR'
  apps_configuration:
    description: 'Configuration for all apps in the repository'
  github_pages_urls:
    description: 'URLs of GitHub Pages for the repository'
  metrics_data:
    description: 'Metrics data from config.yml'
  security_checks:
    description: 'Security check configuration from config.yml'
  performance_monitoring:
    description: 'Performance monitoring configuration from config.yml'

runs:
  using: "composite"
  steps:
  - name: Install jq and yq
    shell: bash
    run: |
      sudo apt-get update
      sudo apt-get install -y jq
      sudo wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/bin/yq
      sudo chmod +x /usr/bin/yq
      if [ "${{ inputs.debug }}" = "true" ]; then
        echo "Debug: jq and yq installed"
      fi

  - name: Load and parse config.yml
    id: load_config
    shell: bash
    run: |
      CONFIG_CONTENT=$(cat "$GITHUB_WORKSPACE/.github/config.yml")
      if [ -z "$CONFIG_CONTENT" ]; then
        echo "Error: Failed to read config.yml"
        exit 1
      fi
      CONFIG_DATA=$(echo "$CONFIG_CONTENT" | yq eval -o=json -)
      if [ -z "$CONFIG_DATA" ]; then
        echo "Error: Failed to parse config.yml"
        exit 1
      fi
      echo "config-data<<EOF" >> $GITHUB_OUTPUT
      echo "$CONFIG_DATA" >> $GITHUB_OUTPUT
      echo "EOF" >> $GITHUB_OUTPUT
      if [ "${{ inputs.debug }}" = "true" ]; then
        echo "Debug: Config data loaded and parsed"
        echo "$CONFIG_DATA" | jq '.'
      fi

  - name: Normalize config data
    id: normalize_config
    shell: bash
    run: |
      CONFIG_DATA='${{ steps.load_config.outputs.config-data }}'
      NORMALIZED_CONFIG=$(echo "$CONFIG_DATA" | jq -c '{
        repository: {
          name: .repository.name,
          type: (.repository.type // "monorepo"),
          description: .repository.description,
          version_control: {
            main_branches: (.repository.version_control.main_branches // ["main", "develop"]),
            branch_prefixes: (.repository.version_control.branch_prefixes // {}),
            branch_protection: .repository.version_control.branch_protection,
            merge_strategy: .repository.version_control.merge_strategy,
            auto_delete_merged_branches: .repository.version_control.auto_delete_merged_branches,
            stale_branch_threshold: (.repository.version_control.stale_branch_threshold // 30),
            pr_creation_wait_time: (.repository.version_control.pr_creation_wait_time // 15),
            protected_branches: (.repository.version_control.protected_branches // ["main", "develop"])
          },
          setup: .repository.setup
        },
        packages: {
          global_settings: {
            ci_cd: {
              package_manager: (.packages.global_settings.ci_cd.package_manager // "npm"),
              tools: .packages.global_settings.ci_cd.tools
            },
            security_checks: .packages.global_settings.security_checks,
            performance_monitoring: .packages.global_settings.performance_monitoring
          },
          package_specific: (.packages.package_specific // {})
        },
        plugins: .plugins,
        pr_management: .pr_management,
        release_management: .release_management,
        security_dependency_management: .security_dependency_management,
        issue_management: .issue_management,
        metrics_generation: .metrics_generation
      }')
      echo "normalized-config<<EOF" >> $GITHUB_OUTPUT
      echo "$NORMALIZED_CONFIG" >> $GITHUB_OUTPUT
      echo "EOF" >> $GITHUB_OUTPUT
      if [ "${{ inputs.debug }}" = "true" ]; then
        echo "Debug: Config data normalized"
        echo "$NORMALIZED_CONFIG" | jq '.'
      fi

  - name: Detect package manager
    id: detect_package_manager
    shell: bash
    run: |
      NORMALIZED_CONFIG=$(echo '${{ steps.normalize_config.outputs.normalized-config }}' | jq -r)
      PACKAGE_MANAGER=$(echo "$NORMALIZED_CONFIG" | jq -r '.packages.global_settings.ci_cd.package_manager')
      echo "package-manager=$PACKAGE_MANAGER" >> $GITHUB_OUTPUT
      if [ "${{ inputs.debug }}" = "true" ]; then
        echo "Debug: Package manager detected"
        echo "$PACKAGE_MANAGER"
      fi

  - name: Fetch repository metadata
    id: fetch_repo_metadata
    shell: bash
    env:
      GITHUB_TOKEN: ${{ inputs.github-token }}
    run: |
      REPO_METADATA=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
        "https://api.github.com/repos/$GITHUB_REPOSITORY")
      if [ -z "$REPO_METADATA" ]; then
        echo "Error: Failed to fetch repository metadata"
        exit 1
      fi
      echo "repo-metadata=$(echo "$REPO_METADATA" | jq -R -s @json)" >> $GITHUB_OUTPUT
      if [ "${{ inputs.debug }}" = "true" ]; then
        echo "Debug: Repository metadata fetched"
        echo "$REPO_METADATA" | jq '.'
      fi

  - name: Get changed files
    id: get_changed_files
    shell: bash
    env:
      GITHUB_TOKEN: ${{ inputs.github-token }}
    run: |
      if [[ $GITHUB_REF == refs/pull/* ]]; then
        PR_NUMBER=${GITHUB_REF#refs/pull/}
        PR_NUMBER=${PR_NUMBER%/merge}
        CHANGED_FILES=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
          "https://api.github.com/repos/$GITHUB_REPOSITORY/pulls/$PR_NUMBER/files" \
          | jq -r '.[].filename')
      else
        CHANGED_FILES=$(git diff-tree --no-commit-id --name-only -r $GITHUB_SHA)
      fi
      echo "changed_files=$(echo "$CHANGED_FILES" | jq -R -s @json)" >> $GITHUB_OUTPUT
      if [ "${{ inputs.debug }}" = "true" ]; then
        echo "Debug: Changed files detected"
        echo "$CHANGED_FILES"
      fi

  - name: Set environment variables
    id: set_env_vars
    shell: bash
    run: |
      echo "REPO_NAME=$GITHUB_REPOSITORY" >> $GITHUB_ENV
      echo "REPO_OWNER=${GITHUB_REPOSITORY%%/*}" >> $GITHUB_ENV
      echo "GITHUB_SHA=$GITHUB_SHA" >> $GITHUB_ENV
      echo "GITHUB_REF=$GITHUB_REF" >> $GITHUB_ENV

      NORMALIZED_CONFIG='${{ steps.normalize_config.outputs.normalized-config }}'

      echo "REPO_TYPE=$(echo "$NORMALIZED_CONFIG" | jq -r '.repository.type')" >> $GITHUB_ENV
      echo "MAIN_BRANCHES=$(echo "$NORMALIZED_CONFIG" | jq -r '.repository.version_control.main_branches | join(",")')" >> $GITHUB_ENV
      echo "BRANCH_PREFIXES=$(echo "$NORMALIZED_CONFIG" | jq -r '.repository.version_control.branch_prefixes | to_entries | map("\(.key)=\(.value)") | join(",")')" >> $GITHUB_ENV
      echo "MERGE_STRATEGY=$(echo "$NORMALIZED_CONFIG" | jq -r '.repository.version_control.merge_strategy | @json' | sed 's/"/\\"/g')" >> $GITHUB_ENV
      echo "PROTECTED_BRANCHES=$(echo "$NORMALIZED_CONFIG" | jq -r '.repository.version_control.protected_branches | join(",")')" >> $GITHUB_ENV
      echo "PR_CREATION_WAIT_TIME=$(echo "$NORMALIZED_CONFIG" | jq -r '.repository.version_control.pr_creation_wait_time')" >> $GITHUB_ENV
      echo "STALE_BRANCH_THRESHOLD=$(echo "$NORMALIZED_CONFIG" | jq -r '.repository.version_control.stale_branch_threshold')" >> $GITHUB_ENV

      if [ "${{ inputs.debug }}" = "true" ]; then
        echo "Debug: Environment variables set"
        cat $GITHUB_ENV
      fi

  - name: Set repository context
    id: set_repo_context
    shell: bash
    run: |
      REPO_METADATA='${{ steps.fetch_repo_metadata.outputs.repo-metadata }}'
      NORMALIZED_CONFIG='${{ steps.normalize_config.outputs.normalized-config }}'
      CHANGED_FILES='${{ steps.get_changed_files.outputs.changed_files }}'
      PACKAGE_MANAGER='${{ steps.detect_package_manager.outputs.package-manager }}'

      REPOSITORY_CONTEXT=$(jq -n \
        --argjson repoMetadata "$REPO_METADATA" \
        --argjson config "$NORMALIZED_CONFIG" \
        --arg branch "${GITHUB_REF#refs/heads/}" \
        --arg commit "$GITHUB_SHA" \
        --arg packageManager "$PACKAGE_MANAGER" \
        --argjson changedFiles "$CHANGED_FILES" \
        '{
          repoMetadata: $repoMetadata,
          config: $config,
          branch: $branch,
          commit: $commit,
          repoType: $config.repository.type,
          mainBranches: $config.repository.version_control.main_branches,
          branchPrefixes: $config.repository.version_control.branch_prefixes,
          mergeStrategy: $config.repository.version_control.merge_strategy,
          protectedBranches: $config.repository.version_control.protected_branches,
          packageManager: $packageManager,
          changedFiles: $changedFiles,
          prCreationWaitTime: $config.repository.version_control.pr_creation_wait_time,
          staleBranchThreshold: $config.repository.version_control.stale_branch_threshold
        }')
      echo "repository-context<<EOF" >> $GITHUB_OUTPUT
      echo "$REPOSITORY_CONTEXT" >> $GITHUB_OUTPUT
      echo "EOF" >> $GITHUB_OUTPUT
      if [ "${{ inputs.debug }}" = "true" ]; then
        echo "Debug: Repository context set"
        echo "$REPOSITORY_CONTEXT" | jq '.'
      fi

  - name: Set apps configuration
    id: set_apps_config
    shell: bash
    run: |
      NORMALIZED_CONFIG=$(echo '${{ steps.normalize_config.outputs.normalized-config }}' | jq -r)
      APPS_CONFIG=$(echo "$NORMALIZED_CONFIG" | jq -r '.packages.package_specific')
      echo "apps_configuration=$(echo "$APPS_CONFIG" | jq -R -s @json)" >> $GITHUB_OUTPUT
      if [ "${{ inputs.debug }}" = "true" ]; then
        echo "Debug: Apps configuration set"
        echo "$APPS_CONFIG" | jq '.'
      fi

  - name: Set GitHub Pages URLs
    id: set_github_pages_urls
    shell: bash
    run: |
      NORMALIZED_CONFIG=$(echo '${{ steps.normalize_config.outputs.normalized-config }}' | jq -r)
      PAGES_URL=$(echo "$NORMALIZED_CONFIG" | jq -r '.packages.package_specific.web.ci_cd.deployment.production.url // empty')
      if [ -z "$PAGES_URL" ]; then
        PAGES_URL="https://${GITHUB_REPOSITORY_OWNER}.github.io/${GITHUB_REPOSITORY#*/}"
      fi
      echo "github_pages_urls=$(echo "[\"$PAGES_URL\"]" | jq -R -s @json)" >> $GITHUB_OUTPUT
      if [ "${{ inputs.debug }}" = "true" ]; then
        echo "Debug: GitHub Pages URLs set"
        echo "$PAGES_URL"
      fi

  - name: Set metrics data
    id: set_metrics_data
    shell: bash
    run: |
      NORMALIZED_CONFIG=$(echo '${{ steps.normalize_config.outputs.normalized-config }}' | jq -r)
      METRICS_DATA=$(echo "$NORMALIZED_CONFIG" | jq -r '.metrics_generation')
      echo "metrics_data=$(echo "$METRICS_DATA" | jq -R -s @json)" >> $GITHUB_OUTPUT
      if [ "${{ inputs.debug }}" = "true" ]; then
        echo "Debug: Metrics data set"
        echo "$METRICS_DATA" | jq '.'
      fi

  - name: Set security checks configuration
    id: set_security_checks
    shell: bash
    run: |
      NORMALIZED_CONFIG=$(echo '${{ steps.normalize_config.outputs.normalized-config }}' | jq -r)
      SECURITY_CHECKS=$(echo "$NORMALIZED_CONFIG" | jq -r '.security_dependency_management')
      echo "security_checks=$(echo "$SECURITY_CHECKS" | jq -R -s @json)" >> $GITHUB_OUTPUT
      if [ "${{ inputs.debug }}" = "true" ]; then
        echo "Debug: Security checks configuration set"
        echo "$SECURITY_CHECKS" | jq '.'
      fi

  - name: Set performance monitoring configuration
    id: set_performance_monitoring
    shell: bash
    run: |
      NORMALIZED_CONFIG=$(echo '${{ steps.normalize_config.outputs.normalized-config }}' | jq -r)
      PERFORMANCE_MONITORING=$(echo "$NORMALIZED_CONFIG" | jq -r '.packages.global_settings.performance_monitoring')
      echo "performance_monitoring=$(echo "$PERFORMANCE_MONITORING" | jq -R -s @json)" >> $GITHUB_OUTPUT
      if [ "${{ inputs.debug }}" = "true" ]; then
        echo "Debug: Performance monitoring configuration set"
        echo "$PERFORMANCE_MONITORING" | jq '.'
      fi

  - name: Completion message
    shell: bash
    run: |
      echo "Setup context and prerequisites completed successfully"
      if [ "${{ inputs.debug }}" = "true" ]; then
        echo "Debug: Repository Context"
        echo '${{ steps.set_repo_context.outputs.repository-context }}' | jq '.'
      fi

