name: 'Assign Reviewers'
description: 'Assigns appropriate reviewers to pull requests based on changed files and team expertise'

inputs:
  github-token:
    description: 'GitHub token for API access'
    required: true
  pr-number:
    description: 'Number of the pull request'
    required: true
  codeowners-path:
    description: 'Path to the CODEOWNERS file'
    required: true
    default: '.github/CODEOWNERS'

outputs:
  assigned-reviewers:
    description: 'List of assigned reviewers'
  assignment-reasoning:
    description: 'Explanation of reviewer assignment decisions'

runs:
  using: 'composite'
  steps:
  - name: Checkout repository
    uses: actions/checkout@v3

  - name: Setup Node.js
    uses: actions/setup-node@v3
    with:
      node-version: '20'

  - name: Install dependencies
    shell: bash -l {0}
    run: npm install @actions/github @actions/core

  - name: Assign reviewers
    id: assign
    shell: node
    env:
      GITHUB_TOKEN: ${{ inputs.github-token }}
      PR_NUMBER: ${{ inputs.pr-number }}
      CODEOWNERS_PATH: ${{ inputs.codeowners-path }}
    run: |
      const github = require('@actions/github');
      const core = require('@actions/core');
      const fs = require('fs');

      async function assignReviewers() {
        const octokit = github.getOctokit(process.env.GITHUB_TOKEN);
        const { owner, repo } = github.context.repo;

        try {
          // Fetch PR details
          const { data: pr } = await octokit.rest.pulls.get({
            owner,
            repo,
            pull_number: parseInt(process.env.PR_NUMBER),
          });

          // Read CODEOWNERS file
          const codeowners = fs.readFileSync(process.env.CODEOWNERS_PATH, 'utf8');

          // Implement logic to match changed files with CODEOWNERS
          // This is a simplified example
          const changedFiles = pr.changed_files;
          const potentialReviewers = new Set();

          // Simple parsing of CODEOWNERS (this should be more robust in practice)
          const codeownerRules = codeowners.split('\n').filter(line => line && !line.startsWith('#'));

          codeownerRules.forEach(rule => {
            const [pattern, ...owners] = rule.split(/\s+/);
            if (changedFiles.some(file => file.match(new RegExp(pattern)))) {
              owners.forEach(owner => potentialReviewers.add(owner));
            }
          });

          const assignedReviewers = Array.from(potentialReviewers).slice(0, 2); // Limit to 2 reviewers

          // Assign reviewers
          await octokit.rest.pulls.requestReviewers({
            owner,
            repo,
            pull_number: pr.number,
            reviewers: assignedReviewers,
          });

          core.setOutput('assigned-reviewers', assignedReviewers.join(', '));
          core.setOutput('assignment-reasoning', 'Assigned based on CODEOWNERS matches with changed files');
        } catch (error) {
          core.setFailed(`Error assigning reviewers: ${error.message}`);
        }
      }

      assignReviewers();
