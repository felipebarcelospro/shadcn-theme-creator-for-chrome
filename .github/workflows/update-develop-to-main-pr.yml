name: Update Develop to Main PR

on:
  push:
    branches:
      - develop

permissions:
  contents: write
  pages: write
  id-token: write
  pull-requests: write
  issues: write

jobs:
  update_pr:
    runs-on: ubuntu-22.04
    timeout-minutes: 30
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      GROQ_API_KEY: ${{ secrets.GROQ_API_KEY }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Fetch All Branches
        run: git fetch --all

      - name: Validate GROQ API Key
        run: |
          if [ -z "${{ secrets.GROQ_API_KEY }}" ]; then
            echo "Error: GROQ_API_KEY is not set or empty"
            exit 1
          fi
          echo "GROQ_API_KEY is set and not empty"

      - name: Generate PR Content
        id: pr_content
        uses: fjogeleit/http-request-action@v1
        with:
          url: 'https://api.groq.com/openai/v1/chat/completions'
          method: 'POST'
          customHeaders: '{"Authorization": "Bearer ${{ secrets.GROQ_API_KEY }}", "Content-Type": "application/json"}'
          data: |
            {
              "model": "llama-3.1-70b-versatile",
              "messages": [
                {"role": "system", "content": "You are an AI assistant tasked with creating pull request titles and descriptions. Respond in JSON format with keys 'title' and 'body'."},
                {"role": "user", "content": "Create a pull request title and description for merging develop into main with the following commits: ${{ github.event.commits }}"}
              ],
              "temperature": 0.4,
              "response_format": {"type": "json_object"}
            }

      - name: Parse PR Content
        run: |
          pr_data='${{ steps.pr_content.outputs.response }}'
          pr_title=$(echo "$pr_data" | jq -r '.choices[0].message.content | fromjson | .title // empty')
          pr_body=$(echo "$pr_data" | jq -r '.choices[0].message.content | fromjson | .body // empty')

          if [ -z "$pr_title" ] || [ -z "$pr_body" ]; then
            echo "Error: Generated PR content is null or empty. Exiting."
            exit 1
          fi

          echo "PR_TITLE=$(echo "$pr_title" | sed 's/"/\\"/g')" >> $GITHUB_ENV
          echo "PR_BODY<<EOF" >> $GITHUB_ENV
          echo "$pr_body" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Create or Update Pull Request
        run: |
          set -e
          echo "Processing PR from develop to main"
          
          existing_pr=$(gh pr list --head develop --base main --json number --jq '.[0].number')
          
          if [ -z "$existing_pr" ]; then
            echo "Creating new PR from develop to main"
            gh pr create --title "$PR_TITLE" --body "$PR_BODY" --base main --head develop || {
              echo "Failed to create PR. This might be due to no new commits or other issues."
              exit 0
            }
          else
            echo "Updating existing PR #$existing_pr from develop to main"
            gh pr edit "$existing_pr" --title "$PR_TITLE" --body "$PR_BODY"
          fi

      - name: Link Related Issues
        run: |
          issues=$(gh issue list --search "develop" --json number,title)
          if [ -n "$issues" ]; then
            echo "Linking related issues to PR"
            pr_number=$(gh pr list --head develop --base main --json number --jq '.[0].number')
            updated_body="${PR_BODY}

            Related Issues:
            $(echo "$issues" | jq -r '.[] | "- #\(.number) \(.title)"')"
            gh pr edit "$pr_number" --body "$updated_body"
            echo "$issues" | jq -r '.[]' | while read -r issue; do
              number=$(echo "$issue" | jq -r '.number')
              gh issue comment "$number" --body "This issue is addressed in PR #$pr_number"
            done
          fi

      - name: Debug Information
        run: |
          echo "Debugging Information:"
          echo "PR Title: $PR_TITLE"
          echo "PR Body: $PR_BODY"
          echo "Existing PR: $existing_pr"