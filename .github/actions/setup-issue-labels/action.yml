name: Setup Issue Labels

description: Creates or updates issue labels in the repository

inputs:
  github-token:
    description: 'GitHub token for authentication'
    required: true
  labels:
    description: 'JSON array of label objects to create or update'
    required: true

runs:
  using: 'composite'
  steps:
  - name: Setup Node.js
    uses: actions/setup-node@v3
    with:
      node-version: '20'

  - name: Install dependencies
    shell: bash
    run: |
      npm install @octokit/rest

  - name: Create or update labels
    shell: bash
    env:
      GITHUB_TOKEN: ${{ inputs.github-token }}
      LABELS: ${{ inputs.labels }}
    run: |
      node -e '
      const { Octokit } = require("@octokit/rest");
      const octokit = new Octokit({ auth: process.env.GITHUB_TOKEN });
      const labels = JSON.parse(process.env.LABELS);

      async function setupLabels() {
        for (const label of labels) {
          try {
            await octokit.issues.getLabel({
              owner: process.env.GITHUB_REPOSITORY.split("/")[0],
              repo: process.env.GITHUB_REPOSITORY.split("/")[1],
              name: label.name
            });

            // Label exists, update it
            await octokit.issues.updateLabel({
              owner: process.env.GITHUB_REPOSITORY.split("/")[0],
              repo: process.env.GITHUB_REPOSITORY.split("/")[1],
              name: label.name,
              color: label.color,
              description: label.description
            });
            console.log(`Updated label: ${label.name}`);
          } catch (error) {
            if (error.status === 404) {
              // Label doesn't exist, create it
              await octokit.issues.createLabel({
                owner: process.env.GITHUB_REPOSITORY.split("/")[0],
                repo: process.env.GITHUB_REPOSITORY.split("/")[1],
                name: label.name,
                color: label.color,
                description: label.description
              });
              console.log(`Created label: ${label.name}`);
            } else {
              console.error(`Error processing label ${label.name}:`, error);
            }
          }
        }
      }

      setupLabels().catch(console.error);
      '

outputs:
  labels-updated:
    description: 'Number of labels updated or created'
    value: ${{ steps.create-update-labels.outputs.labels-count }}
