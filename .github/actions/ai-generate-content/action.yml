name: 'AI Generate Content'
description: 'Leverages Google AI Studio with Gemini 1.5PRO to automatically generate high-quality content'

inputs:
  content-type:
    description: 'Type of content to generate (PR description, issue response, etc.)'
    required: true
  context-data:
    description: 'JSON string containing relevant context data'
    required: true
  template-path:
    description: 'Path to content template file'
    required: false
  additional-context:
    description: 'Additional context or instructions for the AI'
    required: false
  tone:
    description: 'Desired tone of the generated content (formal, casual, technical, etc.)'
    required: false
    default: 'neutral'
  max-length:
    description: 'Maximum length of the generated content in characters'
    required: false
    default: '2000'
  ai-api-key:
    description: 'API key for the AI service'
    required: true
  ai-model:
    description: 'AI model to use for content generation'
    required: true
    default: 'gemini-1.5-pro'

outputs:
  generated-content:
    description: 'The AI-generated content'
  generation-metadata:
    description: 'Metadata about the generation process (model used, confidence score, etc.)'

runs:
  using: 'composite'
  steps:
  - name: Prepare AI prompt and load template
    id: prepare-data
    uses: actions/github-script@v6
    with:
      script: |
        const fs = require('fs');

        // Prepare prompt
        const prompt = `
        Generate ${context.inputs['content-type']} content with the following context:
        ${context.inputs['context-data']}

        Additional instructions:
        ${context.inputs['additional-context']}

        Please use a ${context.inputs['tone']} tone and limit the response to ${context.inputs['max-length']} characters.

        If a template is provided, use it as a guide for the structure and format of the content.
        `;

        core.setOutput('prompt', prompt);

        // Load template if provided
        if (context.inputs['template-path']) {
          try {
            const template = fs.readFileSync(context.inputs['template-path'], 'utf8');
            core.setOutput('template', template);
          } catch (error) {
            core.setFailed(`Error reading template file: ${error.message}`);
          }
        }

  - name: Generate content
    id: generate-content
    uses: fjogeleit/http-request-action@v1
    with:
      url: 'https://generativelanguage.googleapis.com/v1beta/models/${{ inputs.ai-model }}:generateContent?key=${{ inputs.ai-api-key }}'
      method: 'POST'
      customHeaders: '{"Content-Type": "application/json"}'
      data: >
        {
          "contents": [
            {
              "parts": [
                {
                  "text": "${{ steps.prepare-prompt.outputs.prompt }}"
                }
              ]
            }
          ],
          "safetySettings": [
            {
              "category": "HARM_CATEGORY_DANGEROUS_CONTENT",
              "threshold": "BLOCK_ONLY_HIGH"
            }
          ],
          "generationConfig": {
            "temperature": 0.2,
            "topK": 20,
            "topP": 0.8,
            "maxOutputTokens": 1000,
            "stopSequences": ["EOF"]
          }
        }

  - name: Process response
    id: process-response
    run: |
      echo '${{ steps.generate-content.outputs.response }}' > response.json
      content=$(jq -r '.candidates[0].content.parts[0].text // empty' response.json)
      metadata=$(jq -r '.candidates[0].safetyRatings // empty' response.json)

      echo "generated-content<<EOF" >> $GITHUB_OUTPUT
      echo "$content" >> $GITHUB_OUTPUT
      echo "EOF" >> $GITHUB_OUTPUT

      echo "generation-metadata<<EOF" >> $GITHUB_OUTPUT
      echo "$metadata" >> $GITHUB_OUTPUT
      echo "EOF" >> $GITHUB_OUTPUT
    shell: bash

  - name: Debug - Generated content
    run: |
      echo "Generated content:"
      echo "${{ steps.process-response.outputs.generated-content }}"
      echo "Generation metadata:"
      echo "${{ steps.process-response.outputs.generation-metadata }}"
    shell: bash
