name: 'Track SLA'
description: 'Automatically tracks and enforces Service Level Agreements (SLAs) for issues and PRs'

inputs:
  github-token:
    description: 'GitHub token for API access'
    required: true
  item-type:
    description: 'Type of item to track SLA (issue/pr)'
    required: true
  item-number:
    description: 'Number of the issue or PR'
    required: true
  sla-timeframe:
    description: 'SLA timeframe in minutes'
    required: true
  warning-threshold:
    description: 'Warning threshold in minutes before SLA breach'
    required: true

outputs:
  sla-status:
    description: 'Current SLA status (e.g., "within SLA", "at risk", "breached")'
  time-remaining:
    description: 'Time remaining before SLA breach (in minutes)'

runs:
  using: 'composite'
  steps:
  - name: Checkout repository
    uses: actions/checkout@v3

  - name: Setup Python
    uses: actions/setup-python@v4
    with:
      python-version: '3.x'

  - name: Install dependencies
    shell: bash -l {0}
    run: |
      python -m pip install --upgrade pip
      pip install PyGithub

  - name: Track SLA
    id: track-sla
    shell: python
    env:
      GITHUB_TOKEN: ${{ inputs.github-token }}
      ITEM_TYPE: ${{ inputs.item-type }}
      ITEM_NUMBER: ${{ inputs.item-number }}
      SLA_TIMEFRAME: ${{ inputs.sla-timeframe }}
      WARNING_THRESHOLD: ${{ inputs.warning-threshold }}
    run: |
      import os
      import sys
      from github import Github
      from datetime import datetime, timezone

      def calculate_sla(created_at, sla_timeframe, warning_threshold):
          now = datetime.now(timezone.utc)
          elapsed_time = (now - created_at).total_seconds() / 60  # in minutes
          time_remaining = sla_timeframe - elapsed_time

          if time_remaining <= 0:
              return 'breached', 0
          elif time_remaining <= warning_threshold:
              return 'at risk', round(time_remaining)
          else:
              return 'within SLA', round(time_remaining)

      try:
          g = Github(os.environ['GITHUB_TOKEN'])
          repo = g.get_repo(os.environ['GITHUB_REPOSITORY'])

          item_type = os.environ['ITEM_TYPE']
          item_number = int(os.environ['ITEM_NUMBER'])
          sla_timeframe = int(os.environ['SLA_TIMEFRAME'])
          warning_threshold = int(os.environ['WARNING_THRESHOLD'])

          if item_type == 'issue':
              item = repo.get_issue(item_number)
          elif item_type == 'pr':
              item = repo.get_pull(item_number)
          else:
              raise ValueError(f"Invalid item type: {item_type}")

          sla_status, time_remaining = calculate_sla(item.created_at, sla_timeframe, warning_threshold)

          sla_info = f"""
          ## SLA Status
          - Current status: {sla_status}
          - Time remaining: {time_remaining} minutes
          """

          item.edit(body=sla_info)

          label_map = {
              'within SLA': 'SLA: On Track',
              'at risk': 'SLA: At Risk',
              'breached': 'SLA: Breached'
          }
          item.add_to_labels(label_map[sla_status])

          print(f"::set-output name=sla-status::{sla_status}")
          print(f"::set-output name=time-remaining::{time_remaining}")

      except Exception as e:
          print(f"Error: {str(e)}", file=sys.stderr)
          print("::set-output name=sla-status::error")
          print("::set-output name=time-remaining::0")
          sys.exit(1)

  - name: Error handling
    if: failure()
    shell: bash -l {0}
    run: |
      echo "An error occurred during SLA tracking"
      echo "sla-status=error" >> $GITHUB_OUTPUT
      echo "time-remaining=0" >> $GITHUB_OUTPUT
