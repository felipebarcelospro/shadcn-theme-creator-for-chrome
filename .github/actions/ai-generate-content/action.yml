name: 'AI Generate Content'
description: 'Leverages Google AI Studio with Gemini 1.5PRO to automatically generate high-quality content'

inputs:
  content-type:
    description: 'Type of content to generate (PR description, issue response, etc.)'
    required: true
  context-data:
    description: 'JSON string containing relevant context data'
    required: true
  template-path:
    description: 'Path to content template file'
    required: false
  additional-context:
    description: 'Additional context or instructions for the AI'
    required: false
  tone:
    description: 'Desired tone of the generated content (formal, casual, technical, etc.)'
    required: false
    default: 'neutral'
  max-length:
    description: 'Maximum length of the generated content in characters'
    required: false
    default: '2000'
  github-token:
    description: 'GitHub token for API access'
    required: true

outputs:
  generated-content:
    description: 'The AI-generated content'
  generation-metadata:
    description: 'Metadata about the generation process (model used, confidence score, etc.)'

runs:
  using: 'composite'
  steps:
  - name: Checkout repository
    uses: actions/checkout@v4

  - name: Setup Node.js
    uses: actions/setup-node@v4
    with:
      node-version: '20'

  - name: Install dependencies
    run: npm ci
    shell: bash -l {0}

  - name: Prepare AI prompt
    id: prepare-prompt
    run: |
      prompt=$(cat << EOF
      Generate ${{ inputs.content-type }} content with the following context:
      ${{ inputs.context-data }}

      Additional instructions:
      ${{ inputs.additional-context }}

      Please use a ${{ inputs.tone }} tone and limit the response to ${{ inputs.max-length }} characters.

      If a template is provided, use it as a guide for the structure and format of the content.
      EOF
      )
      echo "PROMPT<<EOF" >> $GITHUB_ENV
      echo "$prompt" >> $GITHUB_ENV
      echo "EOF" >> $GITHUB_ENV
    shell: bash -l {0}

  - name: Load template
    id: load-template
    if: inputs.template-path
    run: |
      template=$(cat ${{ inputs.template-path }})
      echo "TEMPLATE<<EOF" >> $GITHUB_ENV
      echo "$template" >> $GITHUB_ENV
      echo "EOF" >> $GITHUB_ENV
    shell: bash -l {0}

  - name: Generate content
    id: generate-content
    run: |
      response=$(curl -s -X POST "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-pro:generateContent" \
        -H "Authorization: Bearer ${{ secrets.GOOGLE_AI_API_KEY }}" \
        -H "Content-Type: application/json" \
        -d '{
          "contents": [
            {
              "parts": [
                {
                  "text": "'"${PROMPT}"'"
                }
              ]
            }
          ],
          "generationConfig": {
            "temperature": 0.7,
            "topK": 40,
            "topP": 0.95,
            "maxOutputTokens": $((${{ inputs.max-length }} / 4))
          }
        }')

      content=$(echo "$response" | jq -r '.candidates[0].content.parts[0].text')
      metadata=$(echo "$response" | jq -r '.candidates[0].safetyRatings')

      echo "GENERATED_CONTENT<<EOF" >> $GITHUB_OUTPUT
      echo "$content" >> $GITHUB_OUTPUT
      echo "EOF" >> $GITHUB_OUTPUT

      echo "GENERATION_METADATA<<EOF" >> $GITHUB_OUTPUT
      echo "$metadata" >> $GITHUB_OUTPUT
      echo "EOF" >> $GITHUB_OUTPUT
    shell: bash -l {0}

  - name: Debug - Generated content
    run: |
      echo "Generated content:"
      echo "${{ steps.generate-content.outputs.GENERATED_CONTENT }}"
      echo "Generation metadata:"
      echo "${{ steps.generate-content.outputs.GENERATION_METADATA }}"
    shell: bash -l {0}
