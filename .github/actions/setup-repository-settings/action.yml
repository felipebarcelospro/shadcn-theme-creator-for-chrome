name: Setup Repository Settings
description: Configures repository settings based on provided parameters

inputs:
  github-token:
    description: 'GitHub token for authentication'
    required: true
  has-wiki:
    description: 'Enable or disable wiki for the repository'
    required: true
    type: boolean
  has-issues:
    description: 'Enable or disable issues for the repository'
    required: true
    type: boolean
  has-projects:
    description: 'Enable or disable projects for the repository'
    required: true
    type: boolean
  allow-squash-merge:
    description: 'Allow squash merging for pull requests'
    required: true
    type: boolean
  allow-merge-commit:
    description: 'Allow merge commits for pull requests'
    required: true
    type: boolean
  allow-rebase-merge:
    description: 'Allow rebase merging for pull requests'
    required: true
    type: boolean
  delete-branch-on-merge:
    description: 'Automatically delete head branches after pull requests are merged'
    required: true
    type: boolean

runs:
  using: "composite"
  steps:
  - name: Configure repository settings
    shell: bash
    env:
      GITHUB_TOKEN: ${{ inputs.github-token }}
      HAS_WIKI: ${{ inputs.has-wiki }}
      HAS_ISSUES: ${{ inputs.has-issues }}
      HAS_PROJECTS: ${{ inputs.has-projects }}
      ALLOW_SQUASH_MERGE: ${{ inputs.allow-squash-merge }}
      ALLOW_MERGE_COMMIT: ${{ inputs.allow-merge-commit }}
      ALLOW_REBASE_MERGE: ${{ inputs.allow-rebase-merge }}
      DELETE_BRANCH_ON_MERGE: ${{ inputs.delete-branch-on-merge }}
    run: |
      # Extract owner and repo from GITHUB_REPOSITORY
      IFS='/' read -r OWNER REPO <<< "$GITHUB_REPOSITORY"

      # Construct the API URL
      API_URL="https://api.github.com/repos/$OWNER/$REPO"

      # Prepare the JSON payload
      PAYLOAD=$(cat << EOF
      {
        "has_wiki": $HAS_WIKI,
        "has_issues": $HAS_ISSUES,
        "has_projects": $HAS_PROJECTS,
        "allow_squash_merge": $ALLOW_SQUASH_MERGE,
        "allow_merge_commit": $ALLOW_MERGE_COMMIT,
        "allow_rebase_merge": $ALLOW_REBASE_MERGE,
        "delete_branch_on_merge": $DELETE_BRANCH_ON_MERGE
      }
      EOF
      )

      # Make the API call to update repository settings
      RESPONSE=$(curl -s -X PATCH \
        -H "Authorization: token $GITHUB_TOKEN" \
        -H "Accept: application/vnd.github.v3+json" \
        -d "$PAYLOAD" \
        "$API_URL")

      # Check if the update was successful
      if [[ $(echo "$RESPONSE" | jq -r '.id') ]]; then
        echo "Repository settings updated successfully"
        echo "settings-updated=true" >> $GITHUB_OUTPUT
      else
        echo "Error updating repository settings: $RESPONSE"
        echo "settings-updated=false" >> $GITHUB_OUTPUT
        exit 1
      fi

outputs:
  settings-updated:
    description: 'Indicates whether the repository settings were successfully updated'
    value: ${{ steps.configure-settings.outputs.settings-updated }}
