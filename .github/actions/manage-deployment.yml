name: 'Manage Deployment'
description: 'Handles deployment operations including deployment, verification, and rollback'

inputs:
  operation:
    description: 'Operation to perform (deploy/verify/rollback)'
    required: true
  deployment-info:
    description: 'JSON string containing deployment information'
    required: true
  environment:
    description: 'Target environment for the operation'
    required: true

outputs:
  operation-status:
    description: 'Status of the performed operation'
  deployment-url:
    description: 'URL of the deployed application (for deploy operation)'
  verification-result:
    description: 'Result of deployment verification (for verify operation)'
  rollback-status:
    description: 'Status of rollback operation (for rollback operation)'

runs:
  using: 'composite'
  steps:
  - name: Parse deployment information
    id: parse-info
    uses: actions/github-script@v6
    with:
      script: |
        const info = JSON.parse('${{ inputs.deployment-info }}');
        return info;

  - name: Deploy application
    if: ${{ inputs.operation == 'deploy' }}
    uses: ./.github/actions/deploy-app
    with:
      package-name: ${{ fromJson(steps.parse-info.outputs.result).appName }}
      artifacts-path: ${{ fromJson(steps.parse-info.outputs.result).artifactsPath }}
      deployment-type: ${{ fromJson(steps.parse-info.outputs.result).deploymentType }}
      deployment-config: ${{ toJson(fromJson(steps.parse-info.outputs.result).deploymentConfig) }}

  - name: Verify deployment
    if: ${{ inputs.operation == 'verify' }}
    uses: ./.github/actions/verify-deployment
    with:
      app-name: ${{ fromJson(steps.parse-info.outputs.result).appName }}
      environment: ${{ inputs.environment }}
      verification-url: ${{ fromJson(steps.parse-info.outputs.result).verificationUrl }}
      timeout: ${{ fromJson(steps.parse-info.outputs.result).timeout || '30' }}
      max-retries: ${{ fromJson(steps.parse-info.outputs.result).maxRetries || '3' }}

  - name: Rollback deployment
    if: ${{ inputs.operation == 'rollback' }}
    uses: ./.github/actions/rollback-deployment
    with:
      app-name: ${{ fromJson(steps.parse-info.outputs.result).appName }}
      environment: ${{ inputs.environment }}
      current-deployment: ${{ toJson(fromJson(steps.parse-info.outputs.result).currentDeployment) }}
      last-stable-commit: ${{ fromJson(steps.parse-info.outputs.result).lastStableCommit }}
      deployment-type: ${{ fromJson(steps.parse-info.outputs.result).deploymentType }}
      deployment-config: ${{ toJson(fromJson(steps.parse-info.outputs.result).deploymentConfig) }}

  - name: Set outputs
    id: set-outputs
    run: |
      if [[ "${{ inputs.operation }}" == "deploy" ]]; then
        echo "operation-status=${{ steps.deploy-application.outputs.deployment-status }}" >> $GITHUB_OUTPUT
        echo "deployment-url=${{ steps.deploy-application.outputs.deployed-url }}" >> $GITHUB_OUTPUT
      elif [[ "${{ inputs.operation }}" == "verify" ]]; then
        echo "operation-status=${{ steps.verify-deployment.outputs.verification-status }}" >> $GITHUB_OUTPUT
        echo "verification-result=${{ steps.verify-deployment.outputs.verification-result }}" >> $GITHUB_OUTPUT
      elif [[ "${{ inputs.operation }}" == "rollback" ]]; then
        echo "operation-status=${{ steps.rollback-deployment.outputs.rollback-status }}" >> $GITHUB_OUTPUT
        echo "rollback-status=${{ steps.rollback-deployment.outputs.new-deployment-details }}" >> $GITHUB_OUTPUT
      fi
    shell: bash

  - name: Notify on failure
    if: failure()
    uses: 8398a7/action-slack@v3
    with:
      status: ${{ job.status }}
      text: "Deployment operation failed for ${{ fromJson(steps.parse-info.outputs.result).appName }} in ${{ inputs.environment }}"
      webhook_url: ${{ secrets.SLACK_WEBHOOK }}
