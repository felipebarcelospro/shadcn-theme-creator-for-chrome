name: 'Analyze Code'
description: 'Performs static code analysis to identify potential issues and maintain code quality'

inputs:
  source-dir:
    description: 'Directory containing source code to analyze'
    required: true
    default: '.'
  previous-results:
    description: 'Path to previous analysis results for comparison'
    required: false
  github-token:
    description: 'GitHub token for authentication'
    required: true
  debug:
    description: 'Enable debug mode'
    required: false
    default: 'false'

outputs:
  quality-report:
    description: 'JSON object containing the code quality report'
  issues:
    description: 'List of potential issues and recommendations'
  diff:
    description: 'Diff from previous analysis'
  visualizations:
    description: 'Graphs of code metrics'

runs:
  using: "composite"
  steps:
  - name: Cache dependencies
    uses: actions/cache@v3
    id: cache
    with:
      path: ~/.npm
      key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
      restore-keys: |
        ${{ runner.os }}-node-

  - name: Install dependencies
    if: steps.cache.outputs.cache-hit != 'true'
    shell: bash
    run: |
      npm install -g eslint typescript @typescript-eslint/parser @typescript-eslint/eslint-plugin jscpd cloc
      npm install --no-save fs path

  - name: Prepare Analysis Environment
    uses: actions/github-script@v6
    with:
      github-token: ${{ inputs.github-token }}
      script: |
        const fs = require('fs');
        const path = require('path');
        const DEBUG = '${{ inputs.debug }}' === 'true';

        function debug(message) {
          if (DEBUG) console.log(`DEBUG: ${message}`);
        }

        try {
          const previousResults = '${{ inputs.previous-results }}';
          if (previousResults) {
            debug(`Using provided previous results: ${previousResults}`);
            fs.copyFileSync(previousResults, 'previous_results.json');
          } else if (fs.existsSync('.github/analysis_results.json')) {
            debug('Using results from previous run');
            fs.copyFileSync('.github/analysis_results.json', 'previous_results.json');
          } else {
            debug('No previous results found');
          }
        } catch (error) {
          core.setFailed(`Failed to prepare analysis environment: ${error.message}`);
          if (DEBUG) console.error(error);
        }

  - name: Run Static Code Analysis
    uses: actions/github-script@v6
    with:
      github-token: ${{ inputs.github-token }}
      script: |
        const fs = require('fs');
        const path = require('path');
        const { execSync } = require('child_process');
        const DEBUG = '${{ inputs.debug }}' === 'true';

        function debug(message) {
          if (DEBUG) console.log(`DEBUG: ${message}`);
        }

        try {
          const sourceDir = '${{ inputs.source-dir }}';
          process.chdir(sourceDir);
          debug(`Changed directory to: ${sourceDir}`);

          // Run ESLint
          debug('Running ESLint');
          const eslintOutput = execSync('eslint . --format=json', { encoding: 'utf8' });
          fs.writeFileSync('eslint_report.json', eslintOutput);

          // Run TypeScript compiler
          debug('Running TypeScript compiler');
          const tscOutput = execSync('tsc --noEmit --pretty false', { encoding: 'utf8' });
          fs.writeFileSync('tsc_report.txt', tscOutput);

          // Run JSCPD
          debug('Running JSCPD');
          const jscpdOutput = execSync('jscpd . --format=json', { encoding: 'utf8' });
          fs.writeFileSync('jscpd_report.json', jscpdOutput);

          // Run CLOC
          debug('Running CLOC');
          const clocOutput = execSync('cloc . --json', { encoding: 'utf8' });
          fs.writeFileSync('cloc_report.json', clocOutput);

          debug('All analysis tools executed successfully');
        } catch (error) {
          core.setFailed(`Static code analysis failed: ${error.message}`);
          if (DEBUG) console.error(error);
        }

  - name: Generate Reports
    uses: actions/github-script@v6
    with:
      github-token: ${{ inputs.github-token }}
      script: "const fs = require('fs');\nconst path = require('path');\nconst DEBUG = '${{ inputs.debug }}' === 'true';\n    #magic___^_^___line\nfunction debug(message) {\n  if (DEBUG) console.log(`DEBUG: ${message}`);\n}\n    #magic___^_^___line\ntry {\n  // Generate comprehensive report\n  debug('Generating comprehensive report');\n  const report = {\n    eslint: JSON.parse(fs.readFileSync('eslint_report.json', 'utf8')),\n    typescript: fs.readFileSync('tsc_report.txt', 'utf8'),\n    jscpd: JSON.parse(fs.readFileSync('jscpd_report.json', 'utf8')),\n    cloc: JSON.parse(fs.readFileSync('cloc_report.json', 'utf8'))\n  };\n  fs.writeFileSync('report.json', JSON.stringify(report, null, 2));\n    #magic___^_^___line\n  // Generate issues list\n  debug('Generating issues list');\n  const eslintIssues = report.eslint.map(file => \n    file.messages.map(msg => `ESLint: ${msg.message} at ${file.filePath}:${msg.line}:${msg.column}`)\n  ).flat();\n  const tsIssues = report.typescript.split('\\n').filter(line => line.includes('error TS')).map(line => `TypeScript: ${line.trim()}`);\n  const jscpdIssues = report.jscpd.duplicates.map(dup => `Duplication: ${dup.firstFile.name} and ${dup.secondFile.name}`);\n  const issues = [...eslintIssues, ...tsIssues, ...jscpdIssues];\n  fs.writeFileSync('issues.txt', issues.join('\\n'));\n    #magic___^_^___line\n  // Compare with previous results\n  debug('Comparing with previous results');\n  if (fs.existsSync('previous_results.json')) {\n    const previousReport = JSON.parse(fs.readFileSync('previous_results.json', 'utf8'));\n    const diff = JSON.stringify(report) !== JSON.stringify(previousReport) ? 'Changes detected' : 'No changes';\n    fs.writeFileSync('diff.txt', diff);\n  } else {\n    fs.writeFileSync('diff.txt', 'No previous results for comparison');\n  }\n    #magic___^_^___line\n  // Prepare visualizations\n  debug('Preparing visualizations');\n  const visualizations = {\n    eslintIssues: report.eslint.reduce((sum, file) => sum + file.errorCount + file.warningCount, 0),\n    duplicatedLines: report.jscpd.statistics.total.duplicatedLines,\n    totalLines: report.cloc.SUM.code\n  };\n  fs.writeFileSync('visualizations.json', JSON.stringify(visualizations, null, 2));\n    #magic___^_^___line\n  // Set outputs\n  core.setOutput('quality-report', JSON.stringify(report));\n  core.setOutput('issues', fs.readFileSync('issues.txt', 'utf8'));\n  core.setOutput('diff', fs.readFileSync('diff.txt', 'utf8'));\n  core.setOutput('visualizations', JSON.stringify(visualizations));\n    #magic___^_^___line\n  // Save results for next run\n  fs.mkdirSync('.github', { recursive: true });\n  fs.copyFileSync('report.json', '.github/analysis_results.json');\n    #magic___^_^___line\n  debug('All reports generated successfully');\n} catch (error) {\n  core.setFailed(`Failed to generate reports: ${error.message}`);\n  if (DEBUG) console.error(error);\n}\n    #magic___^_^___line\n"
  - name: Error Handling
    if: failure()
    uses: actions/github-script@v6
    with:
      github-token: ${{ inputs.github-token }}
      script: |
        const DEBUG = '${{ inputs.debug }}' === 'true';

        function debug(message) {
          if (DEBUG) console.log(`DEBUG: ${message}`);
        }

        debug('Entering error handling step');
        console.log("An error occurred during the analysis. Continuing with available results.");
        core.setOutput('quality-report', JSON.stringify({error: "Analysis failed"}));
        core.setOutput('issues', "Analysis failed");
        core.setOutput('diff', "No diff available due to analysis failure");
        core.setOutput('visualizations', "{}");
        debug('Error handling complete');

  - name: Cleanup
    if: always()
    shell: bash
    run: |
      rm -rf node_modules
      npm cache clean --force
