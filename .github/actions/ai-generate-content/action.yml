name: 'AI Generate Content'
description: 'Leverages Google AI Studio with Gemini 1.5PRO to automatically generate high-quality content'

inputs:
  content-type:
    description: 'Type of content to generate (PR description, issue response, etc.)'
    required: true
  context-data:
    description: 'JSON string containing relevant context data'
    required: true
  template-path:
    description: 'Path to content template file'
    required: false
  additional-context:
    description: 'Additional context or instructions for the AI'
    required: false
  tone:
    description: 'Desired tone of the generated content (formal, casual, technical, etc.)'
    required: false
    default: 'neutral'
  max-length:
    description: 'Maximum length of the generated content in characters'
    required: false
    default: '2000'
  ai-api-key:
    description: 'API key for the AI service'
    required: true
  ai-model:
    description: 'AI model to use for content generation'
    required: true
    default: 'gemini-1.5-pro-002'

outputs:
  generated-content:
    description: 'The AI-generated content'
  generation-metadata:
    description: 'Metadata about the generation process (model used, confidence score, etc.)'

runs:
  using: 'composite'
  steps:
  - name: Prepare AI prompt
    id: prepare-prompt
    run: |
      prompt=$(cat << EOF
      Generate ${{ inputs.content-type }} content with the following context:
      ${{ inputs.context-data }}

      Additional instructions:
      ${{ inputs.additional-context }}

      Please use a ${{ inputs.tone }} tone and limit the response to ${{ inputs.max-length }} characters.

      If a template is provided, use it as a guide for the structure and format of the content.
      EOF
      )
      echo "$prompt" > prompt.txt
    shell: bash

  - name: Load template
    id: load-template
    if: inputs.template-path
    run: |
      template=$(cat ${{ inputs.template-path }})
      echo "$template" > template.txt
    shell: bash

  - name: Generate content
    id: generate-content
    run: |
      max_tokens=$(( ${inputs.max-length:-2000} / 4 ))
      response=$(curl -s -X POST "https://generativelanguage.googleapis.com/v1beta/models/${{ inputs.ai-model }}:generateContent" \
        -H "Authorization: Bearer ${{ inputs.ai-api-key }}" \
        -H "Content-Type: application/json" \
        -d @- << EOF
      {
        "contents": [
          {
            "parts": [
              {
                "text": "$(cat prompt.txt)"
              }
            ]
          }
        ],
        "generationConfig": {
          "temperature": 0.7,
          "topK": 40,
          "topP": 0.95,
          "maxOutputTokens": $max_tokens
        }
      }
      EOF
      )

      echo "$response" > response.json

      content=$(jq -r '.candidates[0].content.parts[0].text' response.json)
      metadata=$(jq -r '.candidates[0].safetyRatings' response.json)

      echo "$content" > generated_content.txt
      echo "$metadata" > generation_metadata.json

      echo "generated-content=$(cat generated_content.txt)" >> $GITHUB_OUTPUT
      echo "generation-metadata=$(cat generation_metadata.json)" >> $GITHUB_OUTPUT
    shell: bash

  - name: Debug - Generated content
    run: |
      echo "Generated content:"
      cat generated_content.txt
      echo "Generation metadata:"
      cat generation_metadata.json
    shell: bash
