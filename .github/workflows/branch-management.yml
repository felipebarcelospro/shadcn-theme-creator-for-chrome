name: Branch Management Workflow

on:
  push:
    branches:
      - '**'
  pull_request:
    types: [opened, synchronize, closed]
  schedule:
    - cron: '0 0 * * *'  # Daily at 00:00 UTC

permissions: {}

jobs:
  branch-management:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        id: checkout
        uses: actions/checkout@v3

      - name: Setup Context
        id: setup-context
        uses: ./.github/actions/setup-context-and-prerequisites
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Validate Branch Name
        id: validate-branch
        uses: ./.github/actions/validate-branch-name
        with:
          branch-name: ${{ github.ref }}
          branch-naming-rules: ${{ steps.setup-context.outputs.branch-prefixes }}
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Create or Update Branch
        id: create-update-branch
        uses: ./.github/actions/create-or-update-branch
        with:
          branch-name: ${{ github.ref_name }}
          base-branch: ${{ github.base_ref || steps.setup-context.outputs.main-branch }}
          commit-changes: ${{ toJson(github.event.commits) }}
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Apply Branch Protection
        id: apply-protection
        uses: ./.github/actions/apply-branch-protection
        with:
          branch-name: ${{ github.ref }}
          protection-rules: ${{ steps.setup-context.outputs.branch-protection-rules }}
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Wait for Manual PR Creation
        id: wait-for-pr
        uses: ./.github/actions/wait-for-pr
        with:
          branch-name: ${{ github.ref }}
          wait-time: ${{ steps.setup-context.outputs.pr-creation-wait-time }}
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate PR Description
        id: generate-pr-description
        uses: ./.github/actions/ai-generate-content
        with:
          ai-api-key: ${{ secrets.GOOGLE_AI_API_KEY }}
          content-type: "pr_description"
          context-data: |
            {
              "branch-name": "${{ github.ref }}",
              "commit-messages": ${{ toJson(github.event.commits) }}
            }
          template-path: .github/templates/BASE/PULL_REQUEST_TEMPLATE.md
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Create or Update PR
        id: create-or-update-pr
        uses: ./.github/actions/create-or-update-pr
        with:
          branch-name: ${{ github.ref }}
          pr-title: ${{ github.event.pull_request.title || format('Update {0}', github.ref) }}
          pr-body: ${{ steps.generate-pr-description.outputs.generated-content }}
          base-branch: ${{ github.base_ref || steps.setup-context.outputs.main-branch }}
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Merge Branch
        id: merge-branch
        if: github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true
        uses: ./.github/actions/merge-branch
        with:
          source-branch: ${{ github.head_ref }}
          target-branch: ${{ github.base_ref }}
          merge-strategy: ${{ steps.setup-context.outputs.merge-strategy }}
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Clean Up Branch
        id: clean-up-branch
        if: github.event_name == 'pull_request' && github.event.action == 'closed'
        uses: ./.github/actions/clean-up-branch
        with:
          branch-name: ${{ github.head_ref }}
          force-delete: ${{ steps.setup-context.outputs.delete-branch-on-merge }}
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Send Notification
        id: send-notification
        uses: ./.github/actions/send-notification
        with:
          notification-type: "branch_management"
          notification-data: |
            {
              "branch": "${{ github.ref }}",
              "action": "${{ github.event_name == 'push' && 'pushed' || github.event.action }}",
              "pr_url": "${{ steps.create-or-update-pr.outputs.pr-url }}"
            }
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Cleanup Stale Branches
        id: cleanup-stale-branches
        if: github.event_name == 'schedule'
        uses: ./.github/actions/cleanup-stale-branches
        with:
          stale-threshold: ${{ steps.setup-context.outputs.stale-branch-threshold }}
          exclude-branches: ${{ steps.setup-context.outputs.protected-branches }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
