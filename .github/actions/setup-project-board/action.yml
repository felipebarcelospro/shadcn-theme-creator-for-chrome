name: Setup Project Board
description: Creates or updates a project board in the repository

inputs:
  github-token:
    description: 'GitHub token for authentication'
    required: true
  columns:
    description: 'JSON array of column names for the project board'
    required: true

runs:
  using: 'composite'
  steps:
  - name: Create or update project board
    id: create-update-project
    shell: bash -l {0}
    env:
      GITHUB_TOKEN: ${{ inputs.github-token }}
      COLUMNS: ${{ inputs.columns }}
    run: |
      # Function to create a project board
      create_project_board() {
        local project_name="Main Project Board"
        local project_body="Main project board for tracking tasks"
        project_data=$(curl -s -X POST -H "Authorization: token $GITHUB_TOKEN" \
          -H "Accept: application/vnd.github.v3+json" \
          "https://api.github.com/repos/$GITHUB_REPOSITORY/projects" \
          -d "{\"name\":\"$project_name\",\"body\":\"$project_body\"}")
        echo "$project_data" | jq -r '.html_url'
      }

      # Function to get existing project board
      get_project_board() {
        local project_name="Main Project Board"
        project_data=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
          -H "Accept: application/vnd.github.v3+json" \
          "https://api.github.com/repos/$GITHUB_REPOSITORY/projects")
        echo "$project_data" | jq -r ".[] | select(.name == \"$project_name\") | .html_url"
      }

      # Function to create a column
      create_column() {
        local project_id="$1"
        local column_name="$2"
        curl -s -X POST -H "Authorization: token $GITHUB_TOKEN" \
          -H "Accept: application/vnd.github.v3+json" \
          "https://api.github.com/projects/$project_id/columns" \
          -d "{\"name\":\"$column_name\"}"
      }

      # Main logic
      project_url=$(get_project_board)
      if [ -z "$project_url" ]; then
        echo "Creating new project board..."
        project_url=$(create_project_board)
      fi

      project_id=$(echo "$project_url" | awk -F'/' '{print $NF}')

      IFS=',' read -ra COLUMN_NAMES <<< "$COLUMNS"
      for column_name in "${COLUMN_NAMES[@]}"; do
        echo "Creating column: $column_name"
        create_column "$project_id" "$column_name"
      done

      echo "project-url=$project_url" >> $GITHUB_OUTPUT

outputs:
  project-url:
    description: 'URL of the created or updated project board'
    value: ${{ steps.create-update-project.outputs.project-url }}
