name: 'Setup Context and Prerequisites'
description: 'Set up necessary context and prerequisites for the workflow'

inputs:
  github-token:
    description: 'GitHub token for API access'
    required: true

outputs:
  repository-context:
    description: 'JSON object containing repository context'
  config-data:
    description: 'Parsed configuration data'
  environment-variables:
    description: 'Set environment variables'
  package-manager:
    description: 'Detected package manager'
  installation-status:
    description: 'Status of the installation process'

runs:
  using: "composite"
  steps:
  - name: Load and parse config.yml
    shell: bash
    env:
      GITHUB_TOKEN: ${{ inputs.github-token }}
    run: |
      CONFIG_PATH='.github/config.yml'
      if [ ! -f "$CONFIG_PATH" ]; then
        echo "::error::config.yml is missing"
        exit 1
      fi
      CONFIG_DATA=$(yq eval -o=json "$CONFIG_PATH")
      echo "config-data<<EOF" >> $GITHUB_OUTPUT
      echo "$CONFIG_DATA" >> $GITHUB_OUTPUT
      echo "EOF" >> $GITHUB_OUTPUT
      echo "Debug: Config data loaded and parsed"

  - name: Detect package manager
    shell: bash
    run: |
      PACKAGE_MANAGER=$(echo "$CONFIG_DATA" | jq -r '.packages.global_settings.ci_cd.tools[] | select(. == "npm" or . == "yarn" or . == "pnpm")')
      if [ -z "$PACKAGE_MANAGER" ]; then
        echo "::error::No supported package manager found in config.yml"
        exit 1
      fi
      echo "package-manager=$PACKAGE_MANAGER" >> $GITHUB_OUTPUT
      echo "Debug: Package manager detected: $PACKAGE_MANAGER"

  - name: Install dependencies
    shell: bash
    env:
      GITHUB_TOKEN: ${{ inputs.github-token }}
    run: |
      ./.github/actions/install-dependencies.sh "$PACKAGE_MANAGER" "${{ runner.OS }}-$PACKAGE_MANAGER-${{ hashFiles('**/package-lock.json', '**/yarn.lock', '**/pnpm-lock.yaml') }}" "$GITHUB_TOKEN"
      echo "Debug: Dependencies installed"

  - name: Fetch repository metadata
    shell: bash
    env:
      GITHUB_TOKEN: ${{ inputs.github-token }}
    run: |
      REPO_METADATA=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
        "https://api.github.com/repos/${{ github.repository }}")
      echo "Debug: Repository metadata fetched"

  - name: Set up environment variables
    shell: bash
    run: |
      {
        echo "REPO_NAME=${{ github.repository }}"
        echo "REPO_OWNER=${{ github.repository_owner }}"
        echo "GITHUB_SHA=${{ github.sha }}"
        echo "GITHUB_REF=${{ github.ref }}"
        echo "PACKAGE_MANAGER=$PACKAGE_MANAGER"
        echo "REPO_TYPE=$(echo "$CONFIG_DATA" | jq -r '.repository.type')"
        echo "MAIN_BRANCHES=$(echo "$CONFIG_DATA" | jq -r '.repository.version_control.main_branches | @json')"
      } >> $GITHUB_ENV
      echo "environment-variables=Environment variables set" >> $GITHUB_OUTPUT
      echo "Debug: Environment variables set"

  - name: Validate repository settings
    shell: bash
    run: |
      HAS_ISSUES=$(echo "$REPO_METADATA" | jq -r '.has_issues')
      HAS_PROJECTS=$(echo "$REPO_METADATA" | jq -r '.has_projects')
      AUTO_LABELING=$(echo "$CONFIG_DATA" | jq -r '.issue_management.auto_label.enabled')
      REPO_TYPE=$(echo "$CONFIG_DATA" | jq -r '.repository.type')

      if [ "$HAS_ISSUES" = "false" ] && [ "$AUTO_LABELING" = "true" ]; then
        echo "::warning::Issues are not enabled for this repository, but issue management is configured"
      fi

      if [ "$HAS_PROJECTS" = "false" ] && [ "$REPO_TYPE" = "monorepo" ]; then
        echo "::warning::Projects are not enabled for this repository, but it is configured as a monorepo"
      fi
      echo "Debug: Repository settings validated"

  - name: Determine current branch and commit information
    shell: bash
    run: |
      CURRENT_BRANCH=${GITHUB_REF#refs/heads/}
      CURRENT_COMMIT=$GITHUB_SHA
      echo "CURRENT_BRANCH=$CURRENT_BRANCH" >> $GITHUB_ENV
      echo "CURRENT_COMMIT=$CURRENT_COMMIT" >> $GITHUB_ENV
      echo "Debug: Current branch and commit information determined"

  - name: Set repository context
    shell: bash
    run: |
      CONTEXT=$(jq -n \
        --argjson repoMetadata "$REPO_METADATA" \
        --argjson config "$CONFIG_DATA" \
        --arg branch "$CURRENT_BRANCH" \
        --arg commit "$CURRENT_COMMIT" \
        --arg repoType "$REPO_TYPE" \
        --argjson mainBranches "$(echo "$CONFIG_DATA" | jq '.repository.version_control.main_branches')" \
        --arg packageManager "$PACKAGE_MANAGER" \
        '{
          repoMetadata: $repoMetadata,
          config: $config,
          branch: $branch,
          commit: $commit,
          repoType: $repoType,
          mainBranches: $mainBranches,
          packageManager: $packageManager
        }')
      echo "repository-context<<EOF" >> $GITHUB_OUTPUT
      echo "$CONTEXT" >> $GITHUB_OUTPUT
      echo "EOF" >> $GITHUB_OUTPUT
      echo "Debug: Repository context set"

  - name: Output results
    shell: bash
    run: |
      echo "Repository context: $CONTEXT"
      echo "Configuration data: $CONFIG_DATA"
      echo "Environment variables set"
      echo "Package manager: $PACKAGE_MANAGER"
      echo "Setup context and prerequisites completed successfully"
      echo "Debug: Results outputted"
