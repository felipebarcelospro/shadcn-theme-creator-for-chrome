name: Publish

on:
  push:
    branches: ["main", "develop", "feature/*", "release/*", "hotfix/*", "ci/*", "chore/*"]
  pull_request:
    branches: ["main", "develop"]
  workflow_dispatch:

permissions:
  contents: write
  pages: write
  id-token: write
  pull-requests: write
  issues: write

jobs:
  check_project_changes:
    runs-on: ubuntu-latest
    outputs:
      changes: ${{ steps.check.outputs.changes }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for Changes
        id: check
        run: |
          echo "changes=[\"all\"]" >> $GITHUB_OUTPUT
          echo "Detected changes in all projects"

  build_packages:
    runs-on: ubuntu-latest
    needs: check_project_changes
    if: contains(fromJson(needs.check_project_changes.outputs.changes), 'all') || contains(fromJson(needs.check_project_changes.outputs.changes), 'packages')
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'

      - name: Cache Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.yarn
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install Dependencies
        run: yarn install --frozen-lockfile

      - name: Build Packages
        run: yarn turbo run build --filter=./packages/*

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: packages-build
          path: ./packages

  build_web:
    runs-on: ubuntu-latest
    needs: check_project_changes
    if: contains(fromJson(needs.check_project_changes.outputs.changes), 'all') || contains(fromJson(needs.check_project_changes.outputs.changes), 'web')
    env:
      NEXT_PUBLIC_PLUNK_API_KEY: ${{ secrets.NEXT_PUBLIC_PLUNK_API_KEY }}
      NEXT_PUBLIC_GOOGLE_ANALYTICS_ID: ${{ vars.NEXT_PUBLIC_GOOGLE_ANALYTICS_ID }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'

      - name: Cache Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.yarn
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install Dependencies
        run: yarn install --frozen-lockfile

      - name: Build Web
        run: yarn turbo run build --filter=web...

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: web-build
          path: ./apps/web/out

  build_chrome_extension:
    runs-on: ubuntu-latest
    needs: check_project_changes
    if: contains(fromJson(needs.check_project_changes.outputs.changes), 'all') || contains(fromJson(needs.check_project_changes.outputs.changes), 'chrome-extension')
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'

      - name: Cache Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.yarn
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install Dependencies
        run: yarn install --frozen-lockfile

      - name: Build Chrome Extension
        run: yarn turbo run build --filter=chrome-extension...

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: chrome-extension-build
          path: ./apps/chrome-extension/dist

  prepare_release:
    runs-on: ubuntu-latest
    needs: [build_packages, build_web, build_chrome_extension]
    if: github.ref == 'refs/heads/main'
    outputs:
      new_version: ${{ steps.version.outputs.new_version }}
      changelog: ${{ steps.changelog.outputs.changelog }}
      has_extension_changes: ${{ steps.check_extension_changes.outputs.has_changes }}
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      GROQ_API_KEY: ${{ secrets.GROQ_API_KEY }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for Extension Changes
        id: check_extension_changes
        run: |
          git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep -q '^apps/chrome-extension/' && echo "has_changes=true" >> $GITHUB_OUTPUT || echo "has_changes=false" >> $GITHUB_OUTPUT

      - name: Determine Version
        id: version
        run: |
          current_version=$(jq -r '.version' package.json)
          new_version=$(echo $current_version | awk -F. '{$NF = $NF + 1;} 1' | sed 's/ /./g')
          echo "new_version=$new_version" >> $GITHUB_OUTPUT

      - name: Generate Changelog
        id: changelog
        uses: fjogeleit/http-request-action@v1
        with:
          url: 'https://api.groq.com/openai/v1/chat/completions'
          method: 'POST'
          customHeaders: '{"Authorization": "Bearer ${{ secrets.GROQ_API_KEY }}", "Content-Type": "application/json"}'
          data: |
            {
              "model": "llama-3.1-70b-versatile",
              "messages": [
                {"role": "system", "content": "You are an AI assistant tasked with creating detailed and user-friendly changelogs. Respond in JSON format with a key 'changelog'."},
                {"role": "user", "content": "Create a detailed and user-friendly changelog for the following commits: ${{ github.event.commits }}"}
              ],
              "temperature": 0.3,
              "response_format": {"type": "json_object"}
            }

      - name: Parse Changelog
        run: |
          changelog_data='${{ steps.changelog.outputs.response }}'
          changelog=$(echo "$changelog_data" | jq -r '.choices[0].message.content | fromjson | .changelog // empty')
          if [ -z "$changelog" ]; then
            echo "Error: Generated changelog is null or empty. Exiting."
            exit 1
          fi
          echo "CHANGELOG<<EOF" >> $GITHUB_ENV
          echo "$changelog" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

  release_web:
    needs: prepare_release
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Download Web Artifact
        uses: actions/download-artifact@v4
        with:
          name: web-build
          path: web-build

      - name: Deploy to GitHub Pages
        uses: actions/deploy-pages@v4
        with:
          artifact_name: web-build

      - name: Update package.json for Web
        run: |
          jq '.version = "${{ needs.prepare_release.outputs.new_version }}"' apps/web/package.json > apps/web/package.json.tmp
          mv apps/web/package.json.tmp apps/web/package.json

      - name: Commit Web Version Update
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add apps/web/package.json
          git commit -m "chore(web): bump version to ${{ needs.prepare_release.outputs.new_version }}"
          git push

  release_extension:
    needs: prepare_release
    runs-on: ubuntu-latest
    if: ${{ needs.prepare_release.outputs.has_extension_changes == 'true' }}
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Download Chrome Extension Artifact
        uses: actions/download-artifact@v4
        with:
          name: chrome-extension-build
          path: releases

      - name: Create GitHub Release for Extension
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.prepare_release.outputs.new_version }}-extension
          name: Chrome Extension Release v${{ needs.prepare_release.outputs.new_version }}
          body: ${{ env.CHANGELOG }}
          draft: false
          prerelease: false
          files: releases/STC_Beta_*.zip
          token: ${{ github.token }}

      - name: Update package.json for Extension
        run: |
          jq '.version = "${{ needs.prepare_release.outputs.new_version }}"' apps/chrome-extension/package.json > apps/chrome-extension/package.json.tmp
          mv apps/chrome-extension/package.json.tmp apps/chrome-extension/package.json

      - name: Commit Extension Version Update
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add apps/chrome-extension/package.json
          git commit -m "chore(extension): bump version to ${{ needs.prepare_release.outputs.new_version }}"
          git push