name: CI/CD Pipeline for Shadcn Theme Creator

on:
  push:
    branches: ["main", "develop", "feature/*", "release/*", "hotfix/*", "ci/*", "chore/*"]
  pull_request:
    branches: ["main", "develop"]
  workflow_dispatch:

permissions:
  contents: write
  pages: write
  id-token: write
  pull-requests: write
  issues: write

jobs:
  check_open_branches:
    runs-on: ubuntu-latest
    outputs:
      branches_without_pr: ${{ steps.check_branches.outputs.branches_without_pr }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for Open Branches without PRs
        id: check_branches
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          branches=$(git branch -r | grep -vE 'origin/(develop|main)' | grep -E 'origin/(feature|release|hotfix|chore|fix)/' | sed 's/origin\///')
          branches_without_pr=()
          for branch in $branches; do
            pr_exists=$(gh pr list --head $branch --base develop --json number --jq 'length')
            if [ "$pr_exists" -eq 0 ]; then
              echo "Branch $branch has no open PR to develop"
              branches_without_pr+=("$branch")
            fi
          done
          if [ ${#branches_without_pr[@]} -gt 0 ]; then
            echo "branches_without_pr=$(IFS=,; echo "${branches_without_pr[*]}")" >> $GITHUB_OUTPUT
          else
            echo "branches_without_pr=" >> $GITHUB_OUTPUT
          fi

  create_pr:
    needs: check_open_branches
    if: needs.check_open_branches.outputs.branches_without_pr != ''
    runs-on: ubuntu-latest
    strategy:
      matrix:
        branch: ${{ fromJson(format('[{0}]', needs.check_open_branches.outputs.branches_without_pr)) }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'

      - name: Install Dependencies
        run: yarn install

      - name: Generate PR Content
        id: pr_content
        env:
          GROQ_API_KEY: ${{ secrets.GROQ_API_KEY }}
        run: |
          git checkout ${{ matrix.branch }}
          commits=$(git log --format=%B origin/develop..${{ matrix.branch }})
          
          pr_data=$(curl -X POST https://api.groq.com/openai/v1/chat/completions \
            -H "Authorization: Bearer $GROQ_API_KEY" \
            -H "Content-Type: application/json" \
            -d '{
              "model": "llama-3.1-70b-versatile",
              "messages": [
                {"role": "system", "content": "You are an AI assistant tasked with creating pull request titles and descriptions. Respond in JSON format with keys 'title' and 'body'."},
                {"role": "user", "content": "Create a pull request title and description for the following branch and commits: Branch: '"${{ matrix.branch }}"', Commits: '"$commits"'"}
              ],
              "temperature": 0.7,
              "response_format": {"type": "json_object"}
            }' | jq -r '.choices[0].message.content')

          echo "pr_title=$(echo $pr_data | jq -r '.title')" >> $GITHUB_OUTPUT
          echo "pr_body=$(echo $pr_data | jq -r '.body')" >> $GITHUB_OUTPUT

      - name: Create Pull Request
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          pr_title="${{ steps.pr_content.outputs.pr_title }}"
          pr_body="${{ steps.pr_content.outputs.pr_body }}"
          
          # Check if PR already exists
          existing_pr=$(gh pr list --head ${{ matrix.branch }} --base develop --json number --jq '.[0].number')
          
          if [ -z "$existing_pr" ]; then
            # Create new PR
            gh pr create --title "$pr_title" --body "$pr_body" --base develop --head ${{ matrix.branch }}
          else
            # Update existing PR
            gh pr edit $existing_pr --title "$pr_title" --body "$pr_body"
          fi

          # Link related issues
          issues=$(gh issue list --search "${{ matrix.branch }}" --json number,title)
          if [ -n "$issues" ]; then
            echo "Related issues found:"
            echo "$issues" | jq -r '.[] | "- #\(.number) \(.title)"' >> $pr_body
            gh pr edit --body "$pr_body"
            
            echo "$issues" | jq -r '.[]' | while read -r issue; do
              number=$(echo $issue | jq -r '.number')
              gh issue comment $number --body "This issue is addressed in PR #$(gh pr view --json number -q .number)"
            done
          fi

  check_project_changes:
    runs-on: ubuntu-latest
    needs: create_pr
    outputs:
      changes: ${{ steps.check.outputs.changes }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Check for Changes
        id: check
        run: |
          changes=()
          if git diff --quiet HEAD^ HEAD -- apps/chrome-extension; then
            echo "No changes in chrome-extension."
          else
            changes+=("extension")
          fi
          if git diff --quiet HEAD^ HEAD -- packages; then
            echo "No changes in packages."
          else
            changes+=("packages")
          fi
          if git diff --quiet HEAD^ HEAD -- apps/web; then
            echo "No changes in web app."
          else
            changes+=("web")
          fi
          if git diff --quiet HEAD^ HEAD -- .github/workflows; then
            echo "No changes in workflows."
          else
            changes+=("ci")
          fi
          if git diff --quiet HEAD^ HEAD -- package.json yarn.lock; then
            echo "No changes in dependencies."
          else
            changes+=("dependencies")
          fi
          if git diff --quiet HEAD^ HEAD -- docs; then
            echo "No changes in documentation."
          else
            changes+=("docs")
          fi

          if [ ${#changes[@]} -eq 0 ]; then
            echo "changes=[]" >> $GITHUB_OUTPUT
          else
            echo "changes=[\"${changes[*]}\"]" >> $GITHUB_OUTPUT
          fi
          echo "Detected changes: ${changes[*]}"

  security_checks:
    runs-on: ubuntu-latest
    needs: check_project_changes
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'

      - name: Install Dependencies
        run: yarn install

      - name: Run Yarn Audit
        run: yarn audit
        continue-on-error: true

  process_custom_push:
    runs-on: ubuntu-latest
    needs: [check_project_changes, security_checks]
    if: contains(fromJson(needs.check_project_changes.outputs.changes), 'web') || contains(fromJson(needs.check_project_changes.outputs.changes), 'extension') || contains(fromJson(needs.check_project_changes.outputs.changes), 'packages') || contains(fromJson(needs.check_project_changes.outputs.changes), 'docs')
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'

      - name: Install Dependencies
        run: yarn install

      - name: Process Custom Push
        env:
          GH_TOKEN: ${{ github.token }}
          GROQ_API_KEY: ${{ secrets.GROQ_API_KEY }}
        run: |
          payload=$(cat .github/workflow_payload.json)
          branch=$(echo $payload | jq -r '.branch')
          changedFiles=$(echo $payload | jq -r '.changedFiles[]')

          commits=$(curl -X POST https://api.groq.com/openai/v1/chat/completions \
            -H "Authorization: Bearer $GROQ_API_KEY" \
            -H "Content-Type: application/json" \
            -d '{
              "model": "llama-3.1-70b-versatile",
              "messages": [
                {"role": "system", "content": "You are an AI assistant tasked with creating detailed Git commits based on file changes. Respond in JSON format."},
                {"role": "user", "content": "Create Git commits for the following changed files, following GitFlow and Conventional Commits standards: '"$changedFiles"'"}
              ],
              "temperature": 0.7,
              "max_tokens": 500,
              "response_format": {"type": "json_object"}
            }' | jq -r '.choices[0].message.content')

          echo "$commits" | jq -r '.commits[]' | while read -r commit; do
            git add .
            git commit -m "$commit"
          done

          git push origin $branch

          pr_data=$(curl -X POST https://api.groq.com/openai/v1/chat/completions \
            -H "Authorization: Bearer $GROQ_API_KEY" \
            -H "Content-Type: application/json" \
            -d '{
              "model": "llama-3.1-70b-versatile",
              "messages": [
                {"role": "system", "content": "You are an AI assistant tasked with creating pull request titles and descriptions. Respond in JSON format with keys 'title' and 'body'."},
                {"role": "user", "content": "Create a pull request title and description for the following branch and changes: Branch: '"$branch"', Changes: '"$commits"'"}
              ],
              "temperature": 0.3,
              "response_format": {"type": "json_object"}
            }' | jq -r '.choices[0].message.content')

          pr_title=$(echo $pr_data | jq -r '.title')
          pr_body=$(echo $pr_data | jq -r '.body')

          gh pr create --title "$pr_title" --body "$pr_body" --base develop

          issues=$(gh issue list --search "$branch" --json number,title)
          if [ -n "$issues" ]; then
            echo "Related issues found:"
            echo "$issues" | jq -r '.[] | "- #\(.number) \(.title)"' >> $pr_body
            gh pr edit --body "$pr_body"
            
            echo "$issues" | jq -r '.[]' | while read -r issue; do
              number=$(echo $issue | jq -r '.number')
              gh issue comment $number --body "This issue is addressed in PR #$(gh pr view --json number -q .number)"
            done
          fi

  build_web:
    runs-on: ubuntu-latest
    needs: [check_project_changes, security_checks]
    if: contains(fromJson(needs.check_project_changes.outputs.changes), 'web')
    env:
      NEXT_PUBLIC_PLUNK_API_KEY: ${{ secrets.NEXT_PUBLIC_PLUNK_API_KEY }}
      NEXT_PUBLIC_GOOGLE_ANALYTICS_ID: ${{ vars.NEXT_PUBLIC_GOOGLE_ANALYTICS_ID }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'

      - name: Cache Turbo dependencies
        uses: actions/cache@v3
        with:
          path: |
            .turbo
            node_modules/.cache/turbo
          key: ${{ runner.os }}-turbo-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-turbo-

      - name: Install Dependencies
        run: yarn install

      - name: List directory contents
        run: ls -R apps/web

      - name: Build Web App
        run: yarn turbo run build --filter=web... --env-mode=loose

      - name: Upload Web Artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./apps/web/out

  deploy_pages:
    runs-on: ubuntu-latest
    needs: [check_project_changes, build_web]
    if: contains(fromJson(needs.check_project_changes.outputs.changes), 'web') || contains(fromJson(needs.check_project_changes.outputs.changes), 'docs')
    steps:
      - name: Deploy to GitHub Pages
        uses: actions/deploy-pages@v4

  build_extension:
    runs-on: ubuntu-latest
    needs: [check_project_changes, security_checks]
    if: contains(fromJson(needs.check_project_changes.outputs.changes), 'extension')
    env:
      NEXT_PUBLIC_PLUNK_API_KEY: ${{ secrets.NEXT_PUBLIC_PLUNK_API_KEY }}
      NEXT_PUBLIC_GOOGLE_ANALYTICS_ID: ${{ vars.NEXT_PUBLIC_GOOGLE_ANALYTICS_ID }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'

      - name: Cache Turbo dependencies
        uses: actions/cache@v3
        with:
          path: |
            .turbo
            node_modules/.cache/turbo
          key: ${{ runner.os }}-turbo-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-turbo-

      - name: Install Dependencies
        run: yarn install

      - name: Build Chrome Extension
        run: yarn turbo run build --filter=chrome-extension...

      - name: Determine Version Bump (GitFlow)
        id: determine_version
        run: |
          branch=$(echo $GITHUB_REF | sed 's/refs\/heads\///')
          if [[ "$branch" == release/* ]]; then
            bump="minor"
          elif [[ "$branch" == hotfix/* ]]; then
            bump="patch"
          else
            bump="patch"
          fi
          version=$(jq -r '.version' apps/chrome-extension/package.json)
          new_version=$(echo $version | awk -F. -v OFS=. -v bump="$bump" '{if (bump == "patch") {$NF += 1} else if (bump == "minor") {$2 += 1; $3=0} else if (bump == "major") {$1 += 1; $2=0; $3=0}; print}')
          echo "New version: $new_version"
          echo "version=$new_version" >> $GITHUB_ENV

          jq --arg version "$new_version" '.version = $version' apps/chrome-extension/package.json > apps/chrome-extension/tmp.json && mv apps/chrome-extension/tmp.json apps/chrome-extension/package.json
          jq --arg version "$new_version" '.version = $version' package.json > tmp.json && mv tmp.json package.json

      - name: Commit Version Update
        run: |
          git config user.name "GitHub Actions"
          git config user.email "<>"
          git add apps/chrome-extension/package.json package.json
          git commit -m "chore: bump version to ${{ env.version }}"
          git push

      - name: Zip Chrome Extension
        run: |
          mkdir -p releases
          cd apps/chrome-extension/dist
          zip -r ../../releases/STC_Beta_${{ env.version }}.zip .

      - name: Upload Chrome Extension Zip
        uses: actions/upload-artifact@v4
        with:
          name: chrome-extension
          path: releases/STC_Beta_${{ env.version }}.zip

  publish_chrome_extension:
    runs-on: ubuntu-latest
    needs: [check_project_changes, build_extension]
    if: contains(fromJson(needs.check_project_changes.outputs.changes), 'extension')
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'

      - name: Download Chrome Extension Artifact
        uses: actions/download-artifact@v4
        with:
          name: chrome-extension
          path: releases

      - name: Upload & Publish to Chrome Web Store
        uses: mnao305/chrome-extension-upload@v5.0.0
        with:
          file-path: releases/STC_Beta_${{ env.version }}.zip
          extension-id: ${{ secrets.EXTENSION_ID }}
          client-id: ${{ secrets.CLIENT_ID }}
          client-secret: ${{ secrets.CLIENT_SECRET }}
          refresh-token: ${{ secrets.REFRESH_TOKEN }}
          publish: true

  release:
    runs-on: ubuntu-latest
    needs: [check_project_changes, build_web, build_extension]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && (contains(fromJson(needs.check_project_changes.outputs.changes), 'web') || contains(fromJson(needs.check_project_changes.outputs.changes), 'extension'))
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'

      - name: Cache Turbo dependencies
        uses: actions/cache@v3
        with:
          path: |
            .turbo
            node_modules/.cache/turbo
          key: ${{ runner.os }}-turbo-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-turbo-

      - name: Install Dependencies
        run: yarn install

      - name: Determine Version
        id: version
        run: |
          current_version=$(jq -r '.version' package.json)
          new_version=$(echo $current_version | awk -F. '{$NF = $NF + 1;} 1' | sed 's/ /./g')
          echo "new_version=$new_version" >> $GITHUB_OUTPUT

      - name: Generate Release Notes with AI
        id: changelog
        env:
          GROQ_API_KEY: ${{ secrets.GROQ_API_KEY }}
        run: |
          commits=$(git log $(git describe --tags --abbrev=0)..HEAD --pretty=format:"%s")
          changelog_response=$(curl -X POST https://api.groq.com/openai/v1/chat/completions \
            -H "Authorization: Bearer $GROQ_API_KEY" \
            -H "Content-Type: application/json" \
            -d '{
              "model": "llama-3.1-70b-versatile",
              "messages": [
                {"role": "system", "content": "You are an AI assistant tasked with creating detailed and user-friendly changelogs. Respond in JSON format with a key 'changelog'."},
                {"role": "user", "content": "Create a detailed and user-friendly changelog for the following commits: \"'"$commits"'\""}
              ],
              "temperature": 0.7,
              "max_tokens": 500,
              "response_format": {"type": "json_object"}
            }')
          echo "changelog=$(echo $changelog_response | jq -r '.choices[0].message.content' | jq -r '.changelog')" >> $GITHUB_OUTPUT

      - name: Update package.json
        run: |
          jq '.version = "${{ steps.version.outputs.new_version }}"' package.json > package.json.tmp
          mv package.json.tmp package.json

      - name: Commit Version Update
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add package.json
          git commit -m "chore: bump version to ${{ steps.version.outputs.new_version }}"
          git push

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.version.outputs.new_version }}
          name: Release v${{ steps.version.outputs.new_version }}
          body: ${{ steps.changelog.outputs.changelog }}
          draft: false
          prerelease: false
          token: ${{ github.token }}

      - name: Download Chrome Extension Artifact
        uses: actions/download-artifact@v4
        with:
          name: chrome-extension
          path: releases

      - name: Attach Chrome Extension to Release
        uses: softprops/action-gh-release@v1
        with:
          files: releases/STC_Beta_${{ env.version }}.zip
          tag_name: v${{ steps.version.outputs.new_version }}
          token: ${{ github.token }}

  build_packages:
    runs-on: ubuntu-latest
    needs: [check_project_changes, security_checks]
    if: contains(fromJson(needs.check_project_changes.outputs.changes), 'packages')
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'

      - name: Cache Turbo dependencies
        uses: actions/cache@v3
        with:
          path: |
            .turbo
            node_modules/.cache/turbo
          key: ${{ runner.os }}-turbo-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-turbo-

      - name: Install Dependencies
        run: yarn install

      - name: Build Packages
        run: yarn turbo run build --filter=./packages/*

      - name: Run Tests
        run: yarn turbo run test --filter=./packages/*

  update_dependencies:
    runs-on: ubuntu-latest
    needs: [check_project_changes, security_checks]
    if: contains(fromJson(needs.check_project_changes.outputs.changes), 'dependencies')
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'

      - name: Update Dependencies
        run: |
          yarn upgrade-interactive --latest
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add package.json yarn.lock
          git commit -m "chore: update dependencies"
          git push

      - name: Run Tests
        run: yarn turbo run test

  generate_documentation:
    runs-on: ubuntu-latest
    needs: [check_project_changes, build_web, build_extension, build_packages]
    if: contains(fromJson(needs.check_project_changes.outputs.changes), 'web') || contains(fromJson(needs.check_project_changes.outputs.changes), 'extension') || contains(fromJson(needs.check_project_changes.outputs.changes), 'packages') || contains(fromJson(needs.check_project_changes.outputs.changes), 'docs')
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'

      - name: Install Dependencies
        run: yarn install

      - name: Generate Documentation
        run: |
          yarn add -D typedoc
          yarn typedoc --entryPointStrategy expand ./src --out docs

      - name: Customize Documentation
        run: |
          echo '<!DOCTYPE html>
          <html lang="en">
          <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Shadcn Theme Creator Documentation</title>
            <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css">
            <style>
              body { font-family: Arial, sans-serif; }
              .content { max-width: 800px; margin: 0 auto; padding: 2rem; }
              h1 { color: #4a5568; }
              a { color: #4299e1; }
              pre { background-color: #edf2f7; padding: 1rem; border-radius: 0.5rem; }
            </style>
          </head>
          <body class="bg-gray-100">
            <div class="content">
              <h1 class="text-4xl font-bold mb-6">Shadcn Theme Creator Documentation</h1>
              <p class="mb-4">Welcome to the documentation for Shadcn Theme Creator. This documentation is automatically generated and updated based on the latest changes in the project.</p>
              <nav class="mb-8">
                <ul class="list-disc list-inside">
                  <li><a href="#api">API Reference</a></li>
                  <li><a href="#components">Components</a></li>
                  <li><a href="#usage">Usage Guide</a></li>
                </ul>
              </nav>
              <!-- Content will be dynamically inserted here -->
            </div>
          </body>
          </html>' > docs/index.html

      - name: Generate Commit Message with Grok
        id: grok_message
        env:
          GROK_API_KEY: ${{ secrets.GROK_API_KEY }}
        run: |
          changes=$(git diff --cached --name-only -- docs)
          message=$(curl -X POST "https://api.grok.com/v1/chat/completions" \
            -H "Authorization: Bearer $GROK_API_KEY" \
            -H "Content-Type: application/json" \
            -d '{
              "model": "grok-1",
              "messages": [
                {"role": "system", "content": "You are an AI assistant tasked with generating concise and informative commit messages based on documentation changes."},
                {"role": "user", "content": "Generate a commit message for the following documentation changes:\n$changes"}
              ],
              "max_tokens": 100
            }' | jq -r '.choices[0].message.content')
          echo "commit_message=$message" >> $GITHUB_OUTPUT

      - name: Commit and Push Documentation
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add docs
          git commit -m "${{ steps.grok_message.outputs.commit_message }}"
          git push

      - name: Deploy Documentation to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          GH_TOKEN: ${{ github.token }}
          publish_dir: ./docs
          publish_branch: gh-pages
          destination_dir: docs
