name: 'AI Generate Content'
description: 'Leverages Google AI Studio with Gemini 1.5PRO to automatically generate high-quality content'

inputs:
  content-type:
    description: 'Type of content to generate (PR description, issue response, etc.)'
    required: true
  context-data:
    description: 'JSON string containing relevant context data'
    required: true
  template-path:
    description: 'Path to content template file'
    required: false
  additional-context:
    description: 'Additional context or instructions for the AI'
    required: false
  tone:
    description: 'Desired tone of the generated content (formal, casual, technical, etc.)'
    required: false
    default: 'neutral'
  max-length:
    description: 'Maximum length of the generated content in characters'
    required: false
    default: '2000'
  ai-api-key:
    description: 'API key for the Google AI service'
    required: true
  ai-model:
    description: 'AI model to use for content generation'
    required: true
    default: 'gemini-1.5-pro'

outputs:
  generated-content:
    description: 'The AI-generated content'
  generation-metadata:
    description: 'Metadata about the generation process (model used, confidence score, etc.)'

runs:
  using: "composite"
  steps:
  - name: Generate AI Content
    id: generate-content
    uses: fjogeleit/http-request-action@v1
    with:
      url: https://generativelanguage.googleapis.com/v1beta/models/${{ inputs.ai-model }}:generateContent?key=${{ inputs.ai-api-key }}
      method: 'POST'
      contentType: 'application/json'
      data: >
        {
          "contents": [
            {
              "parts": [
                {
                  "text": "Generate ${{ inputs.content-type }} content with the following context:\n${{ inputs.context-data }}\n\nAdditional instructions:\n${{ inputs.additional-context }}\n\nPlease use a ${{ inputs.tone }} tone and limit the response to ${{ inputs.max-length }} characters.\n\nIf a template is provided, use it as a guide for the structure and format of the content."
                }
              ]
            }
          ],
          "generationConfig": {
            "temperature": 0.2,
            "topK": 20,
            "topP": 0.8
          }
        }

  - name: Process and validate response
    id: process-response
    uses: actions/github-script@v6
    with:
      script: |
        const response = JSON.parse(process.env.GENERATE_CONTENT_RESPONSE);
        const content = response.candidates[0]?.content?.parts[0]?.text;
        const metadata = response.candidates[0]?.safetyRatings;

        if (!content) {
          core.setFailed('No content generated');
          return;
        }

        core.setOutput('generated-content', content);
        core.setOutput('generation-metadata', JSON.stringify(metadata));

        console.log('Generated content:', content);
        console.log('Generation metadata:', JSON.stringify(metadata, null, 2));
    env:
      GENERATE_CONTENT_RESPONSE: ${{ steps.generate-content.outputs.response }}

  - name: Verify outputs
    if: success()
    run: |
      if [ -z "${{ steps.process-response.outputs.generated-content }}" ]; then
        echo "Error: Generated content is empty"
        exit 1
      fi
      if [ -z "${{ steps.process-response.outputs.generation-metadata }}" ]; then
        echo "Warning: Generation metadata is empty"
      fi
    shell: bash
