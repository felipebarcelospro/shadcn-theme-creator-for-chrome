name: 'Install Dependencies'
description: 'Installs project dependencies with efficient caching'

inputs:
  package-manager:
    description: 'Package manager type (npm, yarn, pnpm)'
    required: true
  cache-key:
    description: 'Cache key based on lock file'
    required: true
  working-directory:
    description: 'Working directory for installation'
    required: false
    default: '.'
  github-token:
    description: 'GitHub token for API access'
    required: true

outputs:
  installation-status:
    description: 'Status of dependency installation (success/failure)'
  installed-packages:
    description: 'List of installed packages (JSON array)'
  cache-hit:
    description: 'Whether there was a cache hit'

runs:
  using: 'composite'
  steps:
  - name: Checkout repository
    uses: actions/checkout@v3

  - name: Setup Node.js
    uses: actions/setup-node@v3
    with:
      node-version: '20'

  - name: Cache dependencies
    id: cache
    uses: actions/cache@v3
    with:
      path: |
        **/node_modules
      key: ${{ inputs.cache-key }}

  - name: Install dependencies
    shell: bash
    working-directory: ${{ inputs.working-directory }}
    run: |
      if [ "${{ inputs.package-manager }}" = "npm" ]; then
        npm ci
      elif [ "${{ inputs.package-manager }}" = "yarn" ]; then
        yarn install --frozen-lockfile
      elif [ "${{ inputs.package-manager }}" = "pnpm" ]; then
        pnpm install --frozen-lockfile
      else
        echo "Unsupported package manager: ${{ inputs.package-manager }}"
        exit 1
      fi

  - name: Get installed packages
    id: get-packages
    shell: bash
    working-directory: ${{ inputs.working-directory }}
    run: |
      if [ "${{ inputs.package-manager }}" = "npm" ]; then
        echo "installed-packages=$(npm list --json | jq -c '.dependencies | keys')" >> $GITHUB_OUTPUT
      elif [ "${{ inputs.package-manager }}" = "yarn" ]; then
        echo "installed-packages=$(yarn list --json | jq -c '.data.trees | map(.name)')" >> $GITHUB_OUTPUT
      elif [ "${{ inputs.package-manager }}" = "pnpm" ]; then
        echo "installed-packages=$(pnpm list --json | jq -c '.[].dependencies | keys')" >> $GITHUB_OUTPUT
      fi

  - name: Set outputs
    id: set-outputs
    shell: bash
    run: |
      echo "installation-status=success" >> $GITHUB_OUTPUT
      echo "installed-packages=${{ steps.get-packages.outputs.installed-packages }}" >> $GITHUB_OUTPUT
      echo "cache-hit=${{ steps.cache.outputs.cache-hit }}" >> $GITHUB_OUTPUT

  - name: Assign reviewers
    id: assign
    shell: node
    env:
      GITHUB_TOKEN: ${{ inputs.github-token }}
    run: |
      const github = require('@actions/github');
      const core = require('@actions/core');

      async function assignReviewers() {
        const octokit = github.getOctokit(process.env.GITHUB_TOKEN);
        const { owner, repo } = github.context.repo;

        try {
          // Your reviewer assignment logic here
          // This is a placeholder and should be replaced with actual logic
          const assignedReviewers = ['reviewer1', 'reviewer2'];

          // Assign reviewers
          await octokit.rest.pulls.requestReviewers({
            owner,
            repo,
            pull_number: github.context.issue.number,
            reviewers: assignedReviewers,
          });

          core.setOutput('assigned-reviewers', assignedReviewers.join(', '));
          core.setOutput('assignment-reasoning', 'Assigned based on project requirements');
        } catch (error) {
          core.setFailed(`Error assigning reviewers: ${error.message}`);
        }
      }

      assignReviewers();
