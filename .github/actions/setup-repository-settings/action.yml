name: Setup Repository Settings
description: Configures repository settings based on provided parameters

inputs:
  github-token:
    description: 'GitHub token for authentication'
    required: true
  has-wiki:
    description: 'Enable or disable wiki for the repository'
    required: true
    type: boolean
  has-issues:
    description: 'Enable or disable issues for the repository'
    required: true
    type: boolean
  has-projects:
    description: 'Enable or disable projects for the repository'
    required: true
    type: boolean
  allow-squash-merge:
    description: 'Allow squash merging for pull requests'
    required: true
    type: boolean
  allow-merge-commit:
    description: 'Allow merge commits for pull requests'
    required: true
    type: boolean
  allow-rebase-merge:
    description: 'Allow rebase merging for pull requests'
    required: true
    type: boolean
  delete-branch-on-merge:
    description: 'Automatically delete head branches after pull requests are merged'
    required: true
    type: boolean

runs:
  using: "composite"
  steps:
  - name: Configure repository settings
    id: configure-settings
    shell: bash
    env:
      GITHUB_TOKEN: ${{ inputs.github-token }}
      HAS_WIKI: ${{ inputs.has-wiki }}
      HAS_ISSUES: ${{ inputs.has-issues }}
      HAS_PROJECTS: ${{ inputs.has-projects }}
      ALLOW_SQUASH_MERGE: ${{ inputs.allow-squash-merge }}
      ALLOW_MERGE_COMMIT: ${{ inputs.allow-merge-commit }}
      ALLOW_REBASE_MERGE: ${{ inputs.allow-rebase-merge }}
      DELETE_BRANCH_ON_MERGE: ${{ inputs.delete-branch-on-merge }}
    run: |
      IFS='/' read -r OWNER REPO <<< "$GITHUB_REPOSITORY"
      API_URL="https://api.github.com/repos/$OWNER/$REPO"

      PAYLOAD=$(jq -n \
        --arg hw "$HAS_WIKI" \
        --arg hi "$HAS_ISSUES" \
        --arg hp "$HAS_PROJECTS" \
        --arg asm "$ALLOW_SQUASH_MERGE" \
        --arg amc "$ALLOW_MERGE_COMMIT" \
        --arg arm "$ALLOW_REBASE_MERGE" \
        --arg dbom "$DELETE_BRANCH_ON_MERGE" \
        '{
          has_wiki: $hw | test("true"),
          has_issues: $hi | test("true"),
          has_projects: $hp | test("true"),
          allow_squash_merge: $asm | test("true"),
          allow_merge_commit: $amc | test("true"),
          allow_rebase_merge: $arm | test("true"),
          delete_branch_on_merge: $dbom | test("true")
        }')

      RESPONSE=$(curl -s -X PATCH \
        -H "Authorization: token $GITHUB_TOKEN" \
        -H "Accept: application/vnd.github.v3+json" \
        -H "X-GitHub-Api-Version: 2022-11-28" \
        -d "$PAYLOAD" \
        "$API_URL")

      if [[ $(echo "$RESPONSE" | jq -r '.id') ]]; then
        echo "Repository settings updated successfully"
        echo "settings-updated=true" >> $GITHUB_OUTPUT
      else
        ERROR_MESSAGE=$(echo "$RESPONSE" | jq -r '.message')
        echo "Error updating repository settings: $ERROR_MESSAGE"
        echo "settings-updated=false" >> $GITHUB_OUTPUT

        if [[ "$ERROR_MESSAGE" == "Resource not accessible by personal access token" ]]; then
          echo "The token does not have sufficient permissions. Please ensure it has 'repo' scope or 'Administration' write permission."
          echo "For more information, see: https://docs.github.com/en/rest/using-the-rest-api/troubleshooting-the-rest-api#resource-not-accessible"
        fi

        exit 1
      fi

outputs:
  settings-updated:
    description: 'Indicates whether the repository settings were successfully updated'
    value: ${{ steps.configure-settings.outputs.settings-updated }}
