name: 'Setup Context and Prerequisites'
description: 'Set up necessary context and prerequisites for the workflow'

inputs:
  github-token:
    description: 'GitHub token for API access'
    required: true

outputs:
  repository-context:
    description: 'JSON object containing repository context'
  config-data:
    description: 'Parsed configuration data'
  environment-variables:
    description: 'Set environment variables'
  package-manager:
    description: 'Detected package manager'
  installation-status:
    description: 'Status of the installation process'

runs:
  using: "composite"
  steps:
  - name: Load and parse config.yml
    shell: bash
    run: |
      CONFIG_PATH='.github/config.yml'
      if [ ! -f "$CONFIG_PATH" ]; then
        echo "::error::config.yml is missing"
        exit 1
      fi
      CONFIG_DATA=$(yq eval -o=json "$CONFIG_PATH")
      echo "config-data<<EOF" >> $GITHUB_OUTPUT
      echo "$CONFIG_DATA" >> $GITHUB_OUTPUT
      echo "EOF" >> $GITHUB_OUTPUT

  - name: Detect package manager
    id: detect-package-manager
    shell: bash
    run: |
      PACKAGE_MANAGER=$(echo "$CONFIG_DATA" | jq -r '.packages.global_settings.ci_cd.package_manager')
      if [ -z "$PACKAGE_MANAGER" ] || [ "$PACKAGE_MANAGER" = "null" ]; then
        if [ -f "package-lock.json" ]; then
          PACKAGE_MANAGER="npm"
        elif [ -f "yarn.lock" ]; then
          PACKAGE_MANAGER="yarn"
        elif [ -f "pnpm-lock.yaml" ]; then
          PACKAGE_MANAGER="pnpm"
        else
          echo "::error::No supported package manager lock file found in the repository root"
          exit 1
        fi
      fi
      echo "package-manager=$PACKAGE_MANAGER" >> $GITHUB_OUTPUT

  - name: Install dependencies
    shell: bash
    env:
      GITHUB_TOKEN: ${{ inputs.github-token }}
    run: |
      case "${{ steps.detect-package-manager.outputs.package-manager }}" in
        npm)
          npm ci
          ;;
        yarn)
          yarn install --frozen-lockfile
          ;;
        pnpm)
          pnpm install --frozen-lockfile
          ;;
        *)
          echo "::error::Unsupported package manager: ${{ steps.detect-package-manager.outputs.package-manager }}"
          exit 1
          ;;
      esac
      echo "installation-status=success" >> $GITHUB_OUTPUT

  - name: Fetch repository metadata
    id: fetch-repo-metadata
    shell: bash
    env:
      GITHUB_TOKEN: ${{ inputs.github-token }}
    run: |
      REPO_METADATA=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
        "https://api.github.com/repos/${{ github.repository }}")
      echo "repo-metadata<<EOF" >> $GITHUB_OUTPUT
      echo "$REPO_METADATA" >> $GITHUB_OUTPUT
      echo "EOF" >> $GITHUB_OUTPUT

  - name: Set up environment variables
    id: set-env-vars
    shell: bash
    run: |
      {
        echo "REPO_NAME=${{ github.repository }}"
        echo "REPO_OWNER=${{ github.repository_owner }}"
        echo "GITHUB_SHA=${{ github.sha }}"
        echo "GITHUB_REF=${{ github.ref }}"
        echo "PACKAGE_MANAGER=${{ steps.detect-package-manager.outputs.package-manager }}"
        echo "REPO_TYPE=$(echo "$CONFIG_DATA" | jq -r '.repository.type')"
        echo "MAIN_BRANCHES=$(echo "$CONFIG_DATA" | jq -r '.repository.version_control.main_branches | @json')"
        echo "BRANCH_PREFIXES=$(echo "$CONFIG_DATA" | jq -r '.repository.version_control.branch_prefixes | @json')"
        echo "MERGE_STRATEGY=$(echo "$CONFIG_DATA" | jq -r '.repository.version_control.merge_strategy | @json')"
        echo "PROTECTED_BRANCHES=$(echo "$CONFIG_DATA" | jq -r '.repository.version_control.protected_branches | @json')"
      } >> $GITHUB_ENV
      echo "environment-variables=Environment variables set" >> $GITHUB_OUTPUT

  - name: Validate repository settings
    shell: bash
    run: |
      HAS_ISSUES=$(echo "${{ steps.fetch-repo-metadata.outputs.repo-metadata }}" | jq -r '.has_issues')
      HAS_PROJECTS=$(echo "${{ steps.fetch-repo-metadata.outputs.repo-metadata }}" | jq -r '.has_projects')
      AUTO_LABELING=$(echo "$CONFIG_DATA" | jq -r '.issue_management.auto_label.enabled')
      REPO_TYPE=$(echo "$CONFIG_DATA" | jq -r '.repository.type')

      if [ "$HAS_ISSUES" = "false" ] && [ "$AUTO_LABELING" = "true" ]; then
        echo "::warning::Issues are not enabled for this repository, but issue management is configured"
      fi

      if [ "$HAS_PROJECTS" = "false" ] && [ "$REPO_TYPE" = "monorepo" ]; then
        echo "::warning::Projects are not enabled for this repository, but it is configured as a monorepo"
      fi

  - name: Set repository context
    id: set-repo-context
    shell: bash
    run: |
      CONTEXT=$(jq -n \
        --argjson repoMetadata "${{ steps.fetch-repo-metadata.outputs.repo-metadata }}" \
        --argjson config "$CONFIG_DATA" \
        --arg branch "${GITHUB_REF#refs/heads/}" \
        --arg commit "$GITHUB_SHA" \
        --arg repoType "$REPO_TYPE" \
        --argjson mainBranches "$(echo "$CONFIG_DATA" | jq '.repository.version_control.main_branches')" \
        --argjson branchPrefixes "$(echo "$CONFIG_DATA" | jq '.repository.version_control.branch_prefixes')" \
        --argjson mergeStrategy "$(echo "$CONFIG_DATA" | jq '.repository.version_control.merge_strategy')" \
        --argjson protectedBranches "$(echo "$CONFIG_DATA" | jq '.repository.version_control.protected_branches')" \
        --arg packageManager "${{ steps.detect-package-manager.outputs.package-manager }}" \
        '{
          repoMetadata: $repoMetadata,
          config: $config,
          branch: $branch,
          commit: $commit,
          repoType: $repoType,
          mainBranches: $mainBranches,
          branchPrefixes: $branchPrefixes,
          mergeStrategy: $mergeStrategy,
          protectedBranches: $protectedBranches,
          packageManager: $packageManager
        }')
      echo "repository-context<<EOF" >> $GITHUB_OUTPUT
      echo "$CONTEXT" >> $GITHUB_OUTPUT
      echo "EOF" >> $GITHUB_OUTPUT

  - name: Output results
    shell: bash
    run: |
      echo "Repository context: ${{ steps.set-repo-context.outputs.repository-context }}"
      echo "Configuration data: $CONFIG_DATA"
      echo "Environment variables set: ${{ steps.set-env-vars.outputs.environment-variables }}"
      echo "Package manager: ${{ steps.detect-package-manager.outputs.package-manager }}"
      echo "Installation status: ${{ steps.install-dependencies.outputs.installation-status }}"
      echo "Setup context and prerequisites completed successfully"
